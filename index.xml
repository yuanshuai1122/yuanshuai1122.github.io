<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>🧀 - 你好</title>
    <link>yuanshuai1122.github.io/</link>
    <description>Recent content on 🧀 - 你好</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Jul 2023 18:12:20 +0000</lastBuildDate><atom:link href="yuanshuai1122.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker安装Kibana和Fscrawler</title>
      <link>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85kibana%E5%92%8Cfscrawler/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85kibana%E5%92%8Cfscrawler/</guid>
      <description>一、安装Kibana 1.1 Kibana是什么 引用ES官方说法 https://www.elastic.co/cn/what-is/kibana Kibana 是一款免费且开放的前端应用程序，其基础是 Elastic Stack，可以为 Elasticsearch 中索引的数据提供搜</description>
    </item>
    
    <item>
      <title>docker安装部署ElasticSearch（单机版）</title>
      <link>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2elasticsearch%E5%8D%95%E6%9C%BA%E7%89%88/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2elasticsearch%E5%8D%95%E6%9C%BA%E7%89%88/</guid>
      <description>一、ElasticSearch安装部署 什么是ElasticSearch？ 简单来说，我们的目标是帮助每个人更快地找到所需内容，从需要通过内网获</description>
    </item>
    
    <item>
      <title>ElasticSearch-查询</title>
      <link>yuanshuai1122.github.io/post/elasticsearch-%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/elasticsearch-%E6%9F%A5%E8%AF%A2/</guid>
      <description>1.DSL查询文档 elasticsearch的查询依然是基于JSON风格的DSL来实现的。 1.1.DSL查询分类 Elasticsearch提</description>
    </item>
    
    <item>
      <title>ElasticSearch-高级特性</title>
      <link>yuanshuai1122.github.io/post/elasticsearch-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/elasticsearch-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>分布式搜索引擎03 1.数据聚合 **聚合（aggregations）**可以让我们极其方便的实现对数据的统计、分析、运算。例如： 什么品牌的手机</description>
    </item>
    
    <item>
      <title>Kubernetes-Pod控制器详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-pod%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-pod%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Pod控制器介绍 Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类： 自主式pod</description>
    </item>
    
    <item>
      <title>Kubernetes-Pod详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-pod%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-pod%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Pod介绍 1.1 Pod结构 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类： 用户程序所在的容器，数量可多可少 Pause容器，这是</description>
    </item>
    
    <item>
      <title>Kubernetes-Service详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-service%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-service%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Service介绍 在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定</description>
    </item>
    
    <item>
      <title>Kubernetes-安全认证</title>
      <link>yuanshuai1122.github.io/post/kubernetes-%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</guid>
      <description>一、访问控制概述 Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubern</description>
    </item>
    
    <item>
      <title>Kubernetes-数据存储</title>
      <link>yuanshuai1122.github.io/post/kubernetes-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况</description>
    </item>
    
    <item>
      <title>Kubernetes尝鲜-部署nginx服务</title>
      <link>yuanshuai1122.github.io/post/kubernetes%E5%B0%9D%E9%B2%9C-%E9%83%A8%E7%BD%B2nginx%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes%E5%B0%9D%E9%B2%9C-%E9%83%A8%E7%BD%B2nginx%E6%9C%8D%E5%8A%A1/</guid>
      <description>本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。 一、Namespace Namespace是kube</description>
    </item>
    
    <item>
      <title>一文入门react全家桶</title>
      <link>yuanshuai1122.github.io/post/%E4%B8%80%E6%96%87%E5%85%A5%E9%97%A8react%E5%85%A8%E5%AE%B6%E6%A1%B6-yi-wen-ru-men-react-quan-jia-tong/</link>
      <pubDate>Mon, 19 Sep 2022 18:08:13 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E4%B8%80%E6%96%87%E5%85%A5%E9%97%A8react%E5%85%A8%E5%AE%B6%E6%A1%B6-yi-wen-ru-men-react-quan-jia-tong/</guid>
      <description>一文入门react全家桶 第1章：React入门 1.1.React简介 1.1.1.官网 英文官网: https://reactjs.org/ 中文官网: https://react.docschina.org/ 1.1.2.介绍描述 用于动态构建</description>
    </item>
    
    <item>
      <title>死磕juc（六）CAS</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E5%85%ADcas-si-ke-juc-liu-cas/</link>
      <pubDate>Mon, 29 Aug 2022 12:36:05 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E5%85%ADcas-si-ke-juc-liu-cas/</guid>
      <description>CAS 一、没有CAS之前 1.1 多线程环境不使用原子类保证线程安全（基本数据类型） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public class T3 { volatile int number = 0; //读取 public int getNumber() { return number; }</description>
    </item>
    
    <item>
      <title>死磕juc（五）volatile与Java内存模型</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%94volatile%E4%B8%8Ejava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-si-ke-juc-wu-volatile-yu-java-nei-cun-mo-xing/</link>
      <pubDate>Mon, 29 Aug 2022 12:35:28 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%94volatile%E4%B8%8Ejava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-si-ke-juc-wu-volatile-yu-java-nei-cun-mo-xing/</guid>
      <description>volatile与Java内存模型 一、被volatile修改的变量有2大特点 1.1 特点 可见性 有序性 1.2 volatile的内存语义 当写一个volat</description>
    </item>
    
    <item>
      <title>死磕juc（四）Java内存模型之JMM</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E5%9B%9Bjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bjmm-si-ke-juc-si-java-nei-cun-mo-xing-zhi-jmm/</link>
      <pubDate>Wed, 24 Aug 2022 13:20:31 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E5%9B%9Bjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bjmm-si-ke-juc-si-java-nei-cun-mo-xing-zhi-jmm/</guid>
      <description>Java内存模型之JMM 一、计算机硬件存储体系 计算机存储结构，从本地磁盘到主存到CPU缓存，也就是从硬盘到内存，到CPU。一般对应的程序的操</description>
    </item>
    
    <item>
      <title>JavaScript进阶-04</title>
      <link>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-04-javascript-jin-jie--04/</link>
      <pubDate>Mon, 22 Aug 2022 12:54:09 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-04-javascript-jin-jie--04/</guid>
      <description>JavaScript 进阶 - 第4天 一、深浅拷贝 首先浅拷贝和深拷贝只针对想Object,Array这样的复杂对象，简单来说，浅拷贝只复制一层对象的属性，二深拷贝则</description>
    </item>
    
    <item>
      <title>JavaScript进阶-03</title>
      <link>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-03-javascript-jin-jie--03/</link>
      <pubDate>Mon, 22 Aug 2022 12:53:39 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-03-javascript-jin-jie--03/</guid>
      <description>JavaScript 进阶 - 第3天 了解构造函数原型对象的语法特征，掌握 JavaScript 中面向对象编程的实现方式，基于面向对象编程思想实现 DOM 操作的封装。 了解面向对象编程的一般特</description>
    </item>
    
    <item>
      <title>JavaScript进阶-02</title>
      <link>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-02-javascript-jin-jie--02/</link>
      <pubDate>Mon, 22 Aug 2022 12:53:10 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-02-javascript-jin-jie--02/</guid>
      <description>JavaScript 进阶 - 第2天 了解面向对象编程的基础概念及构造函数的作用，体会 JavaScript 一切皆对象的语言特征，掌握常见的对象属性和方法的使用。 了解面向对象编程中的一</description>
    </item>
    
    <item>
      <title>JavaScript进阶-01</title>
      <link>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-01-javascript-jin-jie--01/</link>
      <pubDate>Mon, 22 Aug 2022 12:52:31 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/javascript%E8%BF%9B%E9%98%B6-01-javascript-jin-jie--01/</guid>
      <description>JavaScript 进阶 - 第1天 学习作用域、变量提升、闭包等语言特征，加深对 JavaScript 的理解，掌握变量赋值、函数声明的简洁语法，降低代码的冗余度。 理解作用域对程序执行</description>
    </item>
    
    <item>
      <title>死磕juc（三）LockSupport与线程中断</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD-%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</link>
      <pubDate>Mon, 15 Aug 2022 14:02:41 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD-%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</guid>
      <description>LockSupport与线程中断 一、线程中断机制 1.1 什么是中断 首先 一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止。 所以，</description>
    </item>
    
    <item>
      <title>死磕juc（二）java的“锁”事（2）</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B2-si-ke-juc-er-java-de--suo--shi-2/</link>
      <pubDate>Mon, 15 Aug 2022 12:43:29 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B2-si-ke-juc-er-java-de--suo--shi-2/</guid>
      <description>java的”锁“事（2） 一、公平锁和非公平锁 1.1 从ReentrantLock卖票编码演示公平和非公平现象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19</description>
    </item>
    
    <item>
      <title>webApis07-元字符、正则表达式、change事件、检测包含类</title>
      <link>yuanshuai1122.github.io/post/webapis07-%E5%85%83%E5%AD%97%E7%AC%A6%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fchange%E4%BA%8B%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%8C%85%E5%90%AB%E7%B1%BB-webapis07--yuan-zi-fu--zheng-ze-biao-da-shi-change-shi-jian--jian-ce-bao-han-lei/</link>
      <pubDate>Sun, 14 Aug 2022 20:14:19 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis07-%E5%85%83%E5%AD%97%E7%AC%A6%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fchange%E4%BA%8B%E4%BB%B6%E6%A3%80%E6%B5%8B%E5%8C%85%E5%90%AB%E7%B1%BB-webapis07--yuan-zi-fu--zheng-ze-biao-da-shi-change-shi-jian--jian-ce-bao-han-lei/</guid>
      <description>元字符 边界符 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;</description>
    </item>
    
    <item>
      <title>webApis06-navigator、history、本地存储、线程、数组方法、正则表达式</title>
      <link>yuanshuai1122.github.io/post/webapis06-navigatorhistory%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E7%BA%BF%E7%A8%8B%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-webapis06-navigatorhistory-ben-de-cun-chu--xian-cheng--shu-zu-fang-fa--zheng-ze-biao-da-shi/</link>
      <pubDate>Sun, 14 Aug 2022 17:57:58 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis06-navigatorhistory%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E7%BA%BF%E7%A8%8B%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-webapis06-navigatorhistory-ben-de-cun-chu--xian-cheng--shu-zu-fang-fa--zheng-ze-biao-da-shi/</guid>
      <description>navigator对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;l</description>
    </item>
    
    <item>
      <title>webApis05-swiper插件、window对象、定时器、location</title>
      <link>yuanshuai1122.github.io/post/webapis05-swiper%E6%8F%92%E4%BB%B6window%E5%AF%B9%E8%B1%A1%E5%AE%9A%E6%97%B6%E5%99%A8location-webapis05--jie-dian--yi-dong-duan-chu-mo-swiper-cha-jian-window-dui-xiang--ding-shi-qi-location/</link>
      <pubDate>Sun, 14 Aug 2022 17:57:12 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis05-swiper%E6%8F%92%E4%BB%B6window%E5%AF%B9%E8%B1%A1%E5%AE%9A%E6%97%B6%E5%99%A8location-webapis05--jie-dian--yi-dong-duan-chu-mo-swiper-cha-jian-window-dui-xiang--ding-shi-qi-location/</guid>
      <description>节点 查找父节点 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;薪资想过万，代码</description>
    </item>
    
    <item>
      <title>webAPIs04-页面尺寸和位置、时间</title>
      <link>yuanshuai1122.github.io/post/webapis04-%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE%E6%97%B6%E9%97%B4-webapis-day04/</link>
      <pubDate>Wed, 10 Aug 2022 18:34:57 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis04-%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E5%92%8C%E4%BD%8D%E7%BD%AE%E6%97%B6%E9%97%B4-webapis-day04/</guid>
      <description>Web APIs - 第4天 进一步学习 DOM 相关知识，实现可交互的网页特效 能够插入、删除和替换元素节点 能够依据元素节点关系查找节点 日期对象 掌握 Date 日期对象的使用，</description>
    </item>
    
    <item>
      <title>webAPIs03-属性选择器、环境对象this、事件、页面对象</title>
      <link>yuanshuai1122.github.io/post/webapis03-%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AF%B9%E8%B1%A1this%E4%BA%8B%E4%BB%B6%E9%A1%B5%E9%9D%A2%E5%AF%B9%E8%B1%A1-webapis-day03/</link>
      <pubDate>Wed, 10 Aug 2022 17:55:05 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis03-%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8%E7%8E%AF%E5%A2%83%E5%AF%B9%E8%B1%A1this%E4%BA%8B%E4%BB%B6%E9%A1%B5%E9%9D%A2%E5%AF%B9%E8%B1%A1-webapis-day03/</guid>
      <description>Web APIs - 第3天 进一步学习 事件进阶，实现更多交互的网页特效，结合事件流的特征优化事件执行的效率 掌握阻止事件冒泡的方法 理解事件委托的实现原理 事件流</description>
    </item>
    
    <item>
      <title>webAPIs02-事件</title>
      <link>yuanshuai1122.github.io/post/webapis02-%E4%BA%8B%E4%BB%B6-webapis-day02/</link>
      <pubDate>Wed, 10 Aug 2022 17:34:40 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis02-%E4%BA%8B%E4%BB%B6-webapis-day02/</guid>
      <description>Web APIs - 第2天 学会通过为DOM注册事件来实现可交互的网页特效。 能够判断函数运行的环境并确字 this 所指代的对象 理解事件的作用，知道应用事件的 3 个步骤</description>
    </item>
    
    <item>
      <title>webAPIs01-声明变量、元素、定时器</title>
      <link>yuanshuai1122.github.io/post/webapis01-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E5%85%83%E7%B4%A0%E5%AE%9A%E6%97%B6%E5%99%A8-webapis-day01/</link>
      <pubDate>Wed, 10 Aug 2022 17:33:45 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/webapis01-%E5%A3%B0%E6%98%8E%E5%8F%98%E9%87%8F%E5%85%83%E7%B4%A0%E5%AE%9A%E6%97%B6%E5%99%A8-webapis-day01/</guid>
      <description>Web APIs - 第1天笔记 了解 DOM 的结构并掌握其基本的操作，体验 DOM 的在开发中的作用 知道 ECMAScript 与 JavaScript 的关系 了解 DOM 的相关概念及DOM 的本质是一个对象 掌握查找节点的</description>
    </item>
    
    <item>
      <title>死磕juc（二）java的“锁”事（1）</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1-%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1/</link>
      <pubDate>Tue, 09 Aug 2022 20:51:10 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1-%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1/</guid>
      <description>java的”锁“事（1） 一、乐观锁和悲观锁 1.1 悲观锁 认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不</description>
    </item>
    
    <item>
      <title>死磕Juc（一）之CompletableFuture</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%B8%80%E4%B9%8Bcompletablefuture-2022-08-03-13-31-28/</link>
      <pubDate>Wed, 03 Aug 2022 13:31:27 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%BB%E7%A3%95juc%E4%B8%80%E4%B9%8Bcompletablefuture-2022-08-03-13-31-28/</guid>
      <description>死磕Juc（一）之CompletableFuture 一、Future和Callable接口 Future接口定义了操作异步任务执行一些方法，如</description>
    </item>
    
    <item>
      <title>为什么我们需要Pod？</title>
      <link>yuanshuai1122.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81pod-wei-shen-me-wo-men-xu-yao-pod/</link>
      <pubDate>Wed, 20 Jul 2022 18:38:23 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81pod-wei-shen-me-wo-men-xu-yao-pod/</guid>
      <description>为什么我们需要Pod？ 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在前面的文章中，我详细介绍了在 Kubernetes 里部署一个应用的过程</description>
    </item>
    
    <item>
      <title>白话容器基础（四）：重新认识Docker容器</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 19 Jul 2022 18:49:55 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8/</guid>
      <description>白话容器基础（四）：重新认识Docker容器 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在前面的三次分享中，我分别从 Linux</description>
    </item>
    
    <item>
      <title>白话容器基础（三）：深入理解容器镜像</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F-bai-hua-rong-qi-ji-chu--san--shen-ru-li-jie-rong-qi-jing-xiang/</link>
      <pubDate>Tue, 19 Jul 2022 18:35:50 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F-bai-hua-rong-qi-ji-chu--san--shen-ru-li-jie-rong-qi-jing-xiang/</guid>
      <description>白话容器基础（三）：深入理解容器镜像 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在前两次的分享中，我讲解了 Linux 容器最基础</description>
    </item>
    
    <item>
      <title>白话容器基础（二）：隔离与限制</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 19 Jul 2022 18:21:31 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</guid>
      <description>白话容器基础（二）：隔离与限制 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在上一篇文章中，我详细介绍了 Linux 容器中用来实现</description>
    </item>
    
    <item>
      <title>白话容器基础（一）：从进程说开去</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BB%8E%E8%BF%9B%E7%A8%8B%E8%AF%B4%E5%BC%80%E5%8E%BB-bai-hua-rong-qi-ji-chu--yi--cong-jin-cheng-shuo-kai-qu/</link>
      <pubDate>Tue, 19 Jul 2022 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BB%8E%E8%BF%9B%E7%A8%8B%E8%AF%B4%E5%BC%80%E5%8E%BB-bai-hua-rong-qi-ji-chu--yi--cong-jin-cheng-shuo-kai-qu/</guid>
      <description>白话容器基础（一）：从进程说开去 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 先明白一个道理： 容器本身没有价值，有价值的</description>
    </item>
    
    <item>
      <title>微信登录实现（PC端）</title>
      <link>yuanshuai1122.github.io/post/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0pc%E7%AB%AF-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0pc%E7%AB%AF/</link>
      <pubDate>Tue, 12 Jul 2022 17:58:33 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0pc%E7%AB%AF-%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0pc%E7%AB%AF/</guid>
      <description>微信登录实现（PC端） 中心思想： 通过微信扫码和微信交互，最终拿到openid（相当于数据库主键id，是微信用户唯一标识），然后通过openi</description>
    </item>
    
    <item>
      <title>Java强化之线程池</title>
      <link>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Fri, 03 Dec 2021 18:17:42 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>Java强化之线程池 一、什么是线程池 线程池其实就是一种多线程处理形式，处理过程中可以将任务添加到队列中，然后在创建线程后自动启动这些任务。这</description>
    </item>
    
    <item>
      <title>Java强化之泛型</title>
      <link>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 03 Dec 2021 18:17:37 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid>
      <description>Java强化之泛型 一、什么是泛型 1.背景： JAVA推出泛型以前，程序员可以构建一个元素类型为Object的集合，该集合能够存储任意的数据类型</description>
    </item>
    
    <item>
      <title>BTC-密码学原理</title>
      <link>yuanshuai1122.github.io/post/btc-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86-btc--mi-ma-xue-yuan-li/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/btc-%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86-btc--mi-ma-xue-yuan-li/</guid>
      <description>介绍BTC涉及到的密码学原理 比特币被称为加密货币crypto-currency 区块链上内容都是公开的，包括区块的地址，转账的金额。 比特币主要</description>
    </item>
    
    <item>
      <title>BTC-数据结构</title>
      <link>yuanshuai1122.github.io/post/btc-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-btc--shu-ju-jie-gou/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/btc-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-btc--shu-ju-jie-gou/</guid>
      <description>比特币的数据结构 普通指针存储的是某个结构体在内存中的地址。假如P是指向一结构体的指针，那么P里面存放的就是该结构体在内存中的起始位置。而哈希</description>
    </item>
    
    <item>
      <title>Docker之DockerFile解析</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90-docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90-docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;ndash;welcome&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;lt;%=&amp;ldquo;i am in docker tomcat self &amp;ldquo;%&amp;gt; &amp;lt;% System.out.println(&amp;quot;=============docker tomcat self&amp;rdquo;);%&amp;gt; ``` 测试 5、小总结</description>
    </item>
    
    <item>
      <title>Docker之安装</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%AE%89%E8%A3%85/</guid>
      <description>Docker安装步骤 1、CentOS6.8安装Docker yum install -y epel-release 1 yum install -y epel-release Docker使用EPEL发布，RHEL系的OS首先要确保已经持有</description>
    </item>
    
    <item>
      <title>Docker之本地镜像推送到阿里云</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      <description>本地镜像发布到阿里云 1、本地镜像发布到阿里云流程 2、镜像的生成方法 前面的DockerFile 从容器创建一个新的镜像 1 docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]] OPTI</description>
    </item>
    
    <item>
      <title>Docker之常用安装</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/</guid>
      <description>Docker常用安装 1、 总体步骤 搜索镜像 拉取镜像 查看镜像 启动镜像 停止容器 移除容器 2、安装tomcat docker hub上面查找tomcat镜像 1 docker search tomcat</description>
    </item>
    
    <item>
      <title>Docker之常用命令</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Docker常用命令 1、帮助命令 1 docker version 1 docker info 1 docker --help 2、镜像命令 2.1、docker images 1 docker images 列出本地主机上的镜像 各个选项说明: REPOSITO</description>
    </item>
    
    <item>
      <title>Docker之简介</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E7%AE%80%E4%BB%8B-docker%E4%B9%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E7%AE%80%E4%BB%8B-docker%E4%B9%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>Docker简介 1、是什么 1.1、问题：为什么会有docker出现 一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维</description>
    </item>
    
    <item>
      <title>Docker之镜像</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E9%95%9C%E5%83%8F-docker%E4%B9%8B%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E9%95%9C%E5%83%8F-docker%E4%B9%8B%E9%95%9C%E5%83%8F/</guid>
      <description>Docker 镜像 1、是什么 镜像是一种轻量级、可执行的独立软件包， 用来打包软件运行环境和基于运行环境开发的软件 ，它包含运行某个软件所需的所有内容，包括代</description>
    </item>
    
    <item>
      <title>Docker之容器数据卷</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7-docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7-docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</guid>
      <description>Docker容器数据卷 1、是什么 先来看看Docker的理念： 将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望</description>
    </item>
    
    <item>
      <title>Git和Github之Github</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgithub-git%E5%92%8Cgithub%E4%B9%8Bgithub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgithub-git%E5%92%8Cgithub%E4%B9%8Bgithub/</guid>
      <description>GitHub 1、账号信息 GitHub 首页就是注册页面:https://github.com/ 2、创建远程库 3、创建远程库地址别名 查看当前所有远程地址别名 1 git remote -v</description>
    </item>
    
    <item>
      <title>Git和Github之Gitlab服务器搭建</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-git%E5%92%8Cgithub%E4%B9%8Bgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA-git%E5%92%8Cgithub%E4%B9%8Bgitlab%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</guid>
      <description>Gitlab服务器搭建过程 1、官网地址 首页:https://about.gitlab.com/ 安装说明:https://about.gitl</description>
    </item>
    
    <item>
      <title>Git和Github之Git工作流</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%B7%A5%E4%BD%9C%E6%B5%81-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%B7%A5%E4%BD%9C%E6%B5%81-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>Git工作流 1、概念 在项目开发过程中使用 Git 的方式 2、分类 2.1、集中式工作流 像 SVN 一样，集中式工作流以中央仓库作为项目所有修改的单点实体。所有</description>
    </item>
    
    <item>
      <title>Git和Github之Git基本原理</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
      <description>Git基本原理 1、哈希 哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下 几个共同点: 不管输入数据的数据量有多大，输入同</description>
    </item>
    
    <item>
      <title>Git和GitHub之Git简介</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E7%AE%80%E4%BB%8B-git%E5%92%8Cgithub%E4%B9%8Bgit%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E7%AE%80%E4%BB%8B-git%E5%92%8Cgithub%E4%B9%8Bgit%E7%AE%80%E4%BB%8B/</guid>
      <description>Git简介 1、版本控制工具应该具备的功能 协同修改 多人并行不悖的修改服务器端的同一个文件。 数据备份 不仅保存目录和文件的当前状态，还能够保存每一</description>
    </item>
    
    <item>
      <title>Git和Github之Git命令行操作</title>
      <link>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/git%E5%92%8Cgithub%E4%B9%8Bgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C-git%E5%92%8Cgithub%E4%B9%8Bgit%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C/</guid>
      <description>Git命令行操作 1、本地库初始化 命令: 1 git add 效果: 注意:.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。 2、设置签</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第10章对象的实例化内存布局与访问定位</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</guid>
      <description>第 10 章 对象的实例化内存布局与访问定位 1、对象的实例化 大厂面试题 美团： 对象在JVM中是怎么存储的？ 对象头信息里面有哪些东西？ 蚂蚁金服： 二面：j</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第11章直接内存</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</guid>
      <description>第 11 章 直接内存 1、直接内存概述 直接内存 不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第12章执行引擎</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</guid>
      <description>第 12 章 执行引擎 1、执行引擎概述 执行引擎位置 执行引擎属于JVM的下层，里面包括：解释器、即时编译器、垃圾回收器 1.1、执行引擎概述 执行引擎概述</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第13章StringTable</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable/</guid>
      <description>第 13 章 StringTable 1、String 的基本特性 1.1、String 概述 String 的概述 String：字符串，使用一对 “” 引起来表示 1 2 String s1 = &amp;#34;mogublog&amp;#34; ; // 字面量的定义方</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第14章垃圾回收概述</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</guid>
      <description>第 14 章 垃圾回收概述 1、垃圾收集面试题 回顾 JVM 学习路线 关于垃圾收集 Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C语言没有垃圾收集技</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第15章垃圾回收相关算法</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</guid>
      <description>第 15 章 垃圾回收相关算法 1、标记阶段：引用计数器 1.1、标记阶段的目的 垃圾标记阶段：判断对象是否存活 在堆里存放着几乎所有的Java对象实例，在</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第16章垃圾回收相关概念</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>第 16 章 垃圾回收相关概念 1、System.gc() 的理解 1.1、System.gc() 方法 System.gc() 方法 在默认情况下，通过System.gc()者Ru</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第17章垃圾回收器</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>第 17 章 垃圾回收器 1、GC 分类与性能指标 1.1、垃圾回收器概述与分类 垃圾回收器概述 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第1章JVM和Java体系架构</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</guid>
      <description>第 1 章 JVM 和 Java 体系架构 1、JVM 前言 作为Java工程师的你曾被伤害过吗？你是否也遇到过这些问题？ 运行着的线上系统突然卡死，系统无法访问，甚至直</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第2章类加载子系统</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>第 2 章 类加载子系统 1、内存结构概述 如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？ 类加载器 执行引擎 完整框图： 2、类加载子系统 类加载</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第3章运行时数据区概述及线程</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</guid>
      <description>第 3 章 运行时数据区概述及线程 1、前言 本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段 当我们通过前面的：类的加载 &amp;ndash;&amp;gt; 验证 &amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第4章程序计数器</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description>第 4 章 程序计数器 1、PC 寄存器概述 文档网址 https://docs.oracle.com/javase/specs/jvms/se8/html/index.html PC 寄存器介绍 JVM中的程序计数寄存器（Program Counter Register）中，Register的命</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第5章虚拟机栈</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</guid>
      <description>第 5 章 虚拟机栈 1、虚拟机栈概述 1.1、虚拟机栈的出现背景 文档网址 https://docs.oracle.com/javase/specs/jvms/se8/html/index.html 虚拟机栈出现的背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第6章本地方法接口</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</guid>
      <description>第 6 章 本地方法接口 1、本地方法 什么是本地方法？ 简单地讲，一个Native Method是一个Java调用非Java代码的接囗 一个Native M</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第7章本地方法栈</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</guid>
      <description>第 7 章 本地方法栈 1、本地方法栈 本地方法栈的特点 Java虚拟机栈于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。 本地方法栈，也是</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第8章堆</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86/</guid>
      <description>第 8 章 堆 1、堆的核心概述 1.1、认识堆内存 堆与进程 堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM 但是进程包含多个线程，他们是</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第9章方法区</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA/</guid>
      <description>第 9 章 方法区 1、栈 堆 方法区的交互关系 从内存结构来看 这次所讲述的是运行时数据区的最后一个部分 从线程共享与否的角度来看 ThreadLocal：如</description>
    </item>
    
    <item>
      <title>Linux之vi和vim编辑器</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8Bvi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8-linux%E4%B9%8Bvi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8Bvi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8-linux%E4%B9%8Bvi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8/</guid>
      <description>|&amp;mdash; vim [file1 file2 file3 &amp;hellip;]|打开单个或多个文件 :open file|在vim窗口中打开一个新文件 :split file|在新窗口中打开文件（split打开的窗口</description>
    </item>
    
    <item>
      <title>Linux之包管理工具（RPM和YUM）</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rpm%E5%92%8Cyum-linux%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rpm%E5%92%8Cyum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rpm%E5%92%8Cyum-linux%E4%B9%8B%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7rpm%E5%92%8Cyum/</guid>
      <description>包管理工具 1. RPM包 RPM：RedHat Package Manager，红帽软件包管理工具。 Linuxd分发版本都有采用（suse,redhat，cent</description>
    </item>
    
    <item>
      <title>Linux之磁盘分区与挂载度</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD%E5%BA%A6-linux%E4%B9%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD%E5%BA%A6-linux%E4%B9%8B%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA%E4%B8%8E%E6%8C%82%E8%BD%BD%E5%BA%A6/</guid>
      <description>Linux磁盘分区、挂载度 1. 分区方式 mbr分区 最多支持四个主分区 系统只能安装在主分区 扩展分区要占一个主分区 MBR最大只支持2TB，但拥有最好</description>
    </item>
    
    <item>
      <title>Linux之定时任务调度</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6-linux%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6-linux%E4%B9%8B%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</guid>
      <description>|&amp;mdash;|&amp;mdash; 第一个“”|一小时当中的第几分钟|0-59 第二个“”|一天当中的第几小时|0-23 第三个“”|一个月当中的第几天|1-31 第四个“”|一年</description>
    </item>
    
    <item>
      <title>Linux之进程管理</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86-linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86-linux%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>|&amp;mdash; USER|用户说明 PID|进程识别号 %CPU|进程占用cpu百分比 %MEM|进程占用物理内存百分比 VSZ|进程占用虚拟内存大小(KB) RS</description>
    </item>
    
    <item>
      <title>Linux之目录结构和远程登录</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%92%8C%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95-linux%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%92%8C%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%92%8C%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95-linux%E4%B9%8B%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%92%8C%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</guid>
      <description>Linux基本目录机构 1. 基本介绍 Linux的文件系统采用级层式子的树状目录结构， 最上层是根目录“/” Linux世界里，一切皆文件。 2. 目录用途</description>
    </item>
    
    <item>
      <title>Linux之入门</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%85%A5%E9%97%A8-linux%E4%B9%8B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%85%A5%E9%97%A8-linux%E4%B9%8B%E5%85%A5%E9%97%A8/</guid>
      <description>1.Linux介绍 1.1 学习方向 linux运维工程师： 维护linux的服务器（一般大型企业） linux嵌入式工程师： linux做驱动开发，或者l</description>
    </item>
    
    <item>
      <title>Linux之实用指令</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4-linux%E4%B9%8B%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4-linux%E4%B9%8B%E5%AE%9E%E7%94%A8%E6%8C%87%E4%BB%A4/</guid>
      <description>实用指令 1.关机、重启和用户登录注销 1.1. 关机&amp;amp;重启命令 shutdown shutdown -h now：表示立即关机 shutdown -h 1：表示1分钟后关机 shutdown -r now：立即重启 halt halt</description>
    </item>
    
    <item>
      <title>Linux之网络配置</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-linux%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE-linux%E4%B9%8B%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>网络配置 1 Linux网络配置原理 虚拟机NAT网络配置原理 2 查看网络IP和网关 2.1 虚拟机网络编辑器 2.2 修改IP地址 2.3 查看网关 2.4 查看windows中</description>
    </item>
    
    <item>
      <title>Linux之组管理和权限管理</title>
      <link>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-linux%E4%B9%8B%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/linux%E4%B9%8B%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-linux%E4%B9%8B%E7%BB%84%E7%AE%A1%E7%90%86%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</guid>
      <description>] 分数则是： owner = rwx = 4+2+1 = 7 group = rwx = 4+2+1 = 7 others= &amp;mdash; = 0+0+0 = 0 5.2.3.1 使用数字修改权限 chmod [-R] xyz 文件或目录 xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相</description>
    </item>
    
    <item>
      <title>MySQL基础（快速复习版）</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%E7%89%88-mysql%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%E7%89%88-mysql%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%A4%8D%E4%B9%A0%E7%89%88/</guid>
      <description>一、与MySQL的第一次亲密接触 1.1、数据库的相关概念 一、数据库的好处 1、可以持久化数据到本地 2、结构化查询 二、数据库的常见概念 ★ 1、DB</description>
    </item>
    
    <item>
      <title>MySQL基础之变量</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F/</guid>
      <description>&amp;mdash;: | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-: | | 用户变量 | 当前会话 | 会话的任何地方 | 加@符号，不用指定类型 | | 局部变量 | 定义它的BEGIN END中 | BEGIN END的第一句话 | 一</description>
    </item>
    
    <item>
      <title>MySQL基础之查询（二）</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%BA%8C-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%BA%8C-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%BA%8C/</guid>
      <description>&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; | | 分组前筛选 | 原始表 | group by前 where | | 分组后筛选 | group by后的结果集 | group by后 having | 问题1：分组函数做筛选能不能放在where后面 答：</description>
    </item>
    
    <item>
      <title>MySQL基础之查询（一）</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%B8%80-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%B8%80-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%9F%A5%E8%AF%A2%E4%B8%80/</guid>
      <description>SELECT * FROM employees WHERE employee_id BETWEEN 120 AND 100; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 3.in 含义：判断某字段的值是否属于in列表中的某一项 特点： ①使用i</description>
    </item>
    
    <item>
      <title>MySQL基础之常见函数</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</guid>
      <description>常见函数 概念：类似于java的方法，将一组逻辑语句封装在方法体中，对外暴露方法名 好处：1、隐藏了实现细节 2、提高代码的重用性 调用： 1 select 函数名</description>
    </item>
    
    <item>
      <title>MySQL基础之常见约束和标识列</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F%E5%92%8C%E6%A0%87%E8%AF%86%E5%88%97-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F%E5%92%8C%E6%A0%87%E8%AF%86%E5%88%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F%E5%92%8C%E6%A0%87%E8%AF%86%E5%88%97-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%BA%A6%E6%9D%9F%E5%92%8C%E6%A0%87%E8%AF%86%E5%88%97/</guid>
      <description>&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;mdash;&amp;mdash;-: | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;: | :&amp;mdash;&amp;mdash;&amp;mdash;-: | | 主键 | √ | × | 至多有1个 | √，但不推荐 | | 唯一 | √ | √ | 可以有多个 | √，但不推荐 | 外键： 1、要求在从表设置外键关系 2、从表</description>
    </item>
    
    <item>
      <title>MySQL基础之存储过程和函数</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;</description>
    </item>
    
    <item>
      <title>MySQL基础之库和表的管理</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E7%AE%A1%E7%90%86/</guid>
      <description>DDL（数据定义语言） 库和表的管理 一、库的管理 创建、修改、删除 二、表的管理 创建、修改、删除 创建： create 修改： alter 删除： drop 一、库的管理 1、库的创建 语</description>
    </item>
    
    <item>
      <title>MySQL基础之流程控制结构</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid>
      <description>流程控制结构 顺序、分支、循环 一、分支结构 1.if函数 语法： 1 if(条件,值1，值2) 功能：实现双分支 应用在begin end中或外面 2.cas</description>
    </item>
    
    <item>
      <title>MySQL基础之事务</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8B%E5%8A%A1-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8B%E5%8A%A1-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;ndash;: | :&amp;mdash;&amp;mdash;&amp;ndash;: | :&amp;ndash;: | | read uncommitted | √ | √ | √ | | read committed | × | √ | √ | | repeatable read | × | × | √ | | serializable | × | × | × | mysql中默认 第三个隔离级别 repeatable read oracle</description>
    </item>
    
    <item>
      <title>MySQL基础之视图</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE/</guid>
      <description>| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | | 视图 | create view | 只是保存了sql逻辑 | 增删改查，只是一般不能增删改 | | 表 | create table | 保存了数据 | 增删改查 | 案例：查询姓张的学生名和专</description>
    </item>
    
    <item>
      <title>MySQL基础之数据的增删改</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9/</guid>
      <description>DML语言（数据操纵语言） 数据操作语言： 插入：insert 修改：update 删除：delete 一、插入语句 方式一：经典的插入 语法： 1 2 insert into 表</description>
    </item>
    
    <item>
      <title>MySQL基础之数据类型</title>
      <link>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>-: | :&amp;mdash;&amp;ndash;: | :&amp;mdash;&amp;mdash;: | :&amp;mdash;&amp;mdash;-: | :&amp;mdash;&amp;mdash;&amp;mdash;: | :&amp;mdash;-: | | 字节数 | 1 | 2 | 3 | 4 | 8 | 特点： ① 如果不设置无符号还是有符号，默认是有符号，如果想设置无符号，需要添加unsig</description>
    </item>
    
    <item>
      <title>MySQL之安装与配置（mac版）</title>
      <link>yuanshuai1122.github.io/post/mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmac%E7%89%88-mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmac%E7%89%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmac%E7%89%88-mysql%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AEmac%E7%89%88/</guid>
      <description>一、安装 第一步：打开MySQL官网网址，https://www.mysql.com ，点击DOWNLOAD。 第二步： 第一步结束后程序会跳转到h</description>
    </item>
    
    <item>
      <title>NPS内网穿透的搭建与演示</title>
      <link>yuanshuai1122.github.io/post/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%BC%94%E7%A4%BA-nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%BC%94%E7%A4%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%BC%94%E7%A4%BA-nps%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%9A%84%E6%90%AD%E5%BB%BA%E4%B8%8E%E6%BC%94%E7%A4%BA/</guid>
      <description>概念 内网穿透：内网穿透，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。就</description>
    </item>
    
    <item>
      <title>Python爬虫（全）</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E5%85%A8-python%E7%88%AC%E8%99%AB%E5%85%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E5%85%A8-python%E7%88%AC%E8%99%AB%E5%85%A8/</guid>
      <description>（编码encode()） pat=r&amp;quot;(.*?)&amp;quot; data=re.findall(pat,reponse) print(data[0]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ```python #创建自定义opener from urllib import request #构建HTTP处理器对象（</description>
    </item>
    
    <item>
      <title>Python爬虫之BeautifulSoup</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup-python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup-python%E7%88%AC%E8%99%AB%E4%B9%8Bbeautifulsoup/</guid>
      <description>Python爬虫之BeautifulSoup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48</description>
    </item>
    
    <item>
      <title>Python爬虫之fiddler手机抓包</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bfiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85-python%E7%88%AC%E8%99%AB%E4%B9%8Bfiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85md/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bfiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85-python%E7%88%AC%E8%99%AB%E4%B9%8Bfiddler%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85md/</guid>
      <description>Python爬虫之fiddler手机抓包 fiddler官网：https://www.telerik.com/fiddler 通过Fiddler</description>
    </item>
    
    <item>
      <title>Python爬虫之requests</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Brequests-python%E7%88%AC%E8%99%AB%E4%B9%8Brequests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Brequests-python%E7%88%AC%E8%99%AB%E4%B9%8Brequests/</guid>
      <description>Python爬虫之requests 什么是requests？ Requests is an elegant and simple HTTP library for Python, built for human beings. You are currently looking at the documentation of the development release. 通过pip install requests 可以帮你安装它。r</description>
    </item>
    
    <item>
      <title>Python爬虫之scrapy框架</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bscrapy%E6%A1%86%E6%9E%B6-python%E7%88%AC%E8%99%AB%E4%B9%8Bscrapy%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Bscrapy%E6%A1%86%E6%9E%B6-python%E7%88%AC%E8%99%AB%E4%B9%8Bscrapy%E6%A1%86%E6%9E%B6/</guid>
      <description>Python爬虫之scrapy框架 创建项目 scrapy startproject 项目名 创建爬虫 scrapy genspider 爬虫识别名称 &amp;lsquo;要爬取的主机地址&amp;rsquo; 运行爬虫 scrapy crawl 爬虫识别</description>
    </item>
    
    <item>
      <title>Python爬虫之urllib</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Burllib-python%E7%88%AC%E8%99%AB%E4%B9%8Burllib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8Burllib-python%E7%88%AC%E8%99%AB%E4%B9%8Burllib/</guid>
      <description>（编码encode()） pat=r&amp;quot;(.*?)&amp;quot; data=re.findall(pat,reponse) print(data[0]) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ```python #创建自定义opener from urllib import request #构建HTTP处理器对象（</description>
    </item>
    
    <item>
      <title>Python爬虫之多线程</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B-python%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B-python%E7%88%AC%E8%99%AB%E4%B9%8B%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>1&amp;quot;) time.sleep(1) print(&amp;ldquo;线程执行中&amp;mdash;2&amp;rdquo;) time.sleep(1) print(&amp;ldquo;线程执行中&amp;mdash;3&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Python爬虫之数据写入</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5-python%E7%88%AC%E8%99%AB%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5-python%E7%88%AC%E8%99%AB%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5/</guid>
      <description>Python爬虫之数据写入 1 2 3 4 5 6 7 8 9 10 11 12 13 #写入到Excel import xlsxwriter #创建文件，并添加一个工作表 workbook=xlsxwriter.Workbook(&amp;#39;demo.xlsx&amp;#39;) worksheet=workbook.add_worksheet() #在指定位置写入数据 workshe</description>
    </item>
    
    <item>
      <title>Python爬虫之验证码识别</title>
      <link>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-python%E7%88%AC%E8%99%AB%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E7%88%AC%E8%99%AB%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB-python%E7%88%AC%E8%99%AB%E4%B9%8B%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</guid>
      <description>Python爬虫之验证码识别 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #识别车牌号 from aip import AipOcr import re APP_ID = &amp;#39;15469265&amp;#39; API_KEY = &amp;#39;rAGFtOChXtO7mnRPiwXg1Frf&amp;#39; SECRET_KEY = &amp;#39;Ailvoijh4X7lQIAoZ58UsGPlaDCmLIt7&amp;#39; client = AipOcr(APP_ID, API_KEY, SECRET_KEY) &amp;#34;&amp;#34;&amp;#34; 读取图</description>
    </item>
    
    <item>
      <title>Python数据分析之Pandas（二）</title>
      <link>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%8C-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%8C-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%8C/</guid>
      <description>: | &amp;mdash;&amp;mdash;&amp;mdash;: | &amp;mdash;&amp;ndash;: | &amp;mdash;&amp;ndash;: | &amp;mdash;&amp;mdash;: | &amp;mdash;&amp;mdash;&amp;ndash;: | &amp;mdash;&amp;ndash;: | &amp;mdash;: | &amp;mdash;&amp;mdash;: | &amp;mdash;&amp;mdash;-: | | 0 | 2018-01-01 | 3℃ | -6℃ | 晴~多云 | 东北风 | 1-2级 | 59 | 良 | 2 | | 1 | 2018-01-02 | 2℃ | -5℃ | 阴~多云 | 东</description>
    </item>
    
    <item>
      <title>Python数据分析之Pandas（三）</title>
      <link>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%89-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%89-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%89/</guid>
      <description>: | &amp;mdash;&amp;ndash;: | &amp;mdash;&amp;mdash;: | &amp;mdash;&amp;ndash;: | &amp;mdash;&amp;mdash;&amp;ndash;: | | 0 | 1 | 1193 | 5 | 978300760 | | 1 | 1 | 661 | 3 | 978302109 | | 2 | 1 | 914 | 3 | 978301968 | | 3 | 1 | 3408 | 4 | 978300275 | | 4 | 1 | 2355 | 5 | 978824291 | In [3]: 1 2 3</description>
    </item>
    
    <item>
      <title>Python数据分析之Pandas（四）</title>
      <link>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E5%9B%9B-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E5%9B%9B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E5%9B%9B-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E5%9B%9B/</guid>
      <description>: | &amp;mdash;&amp;ndash;: | &amp;mdash;&amp;ndash;: | &amp;mdash;: | &amp;mdash;&amp;mdash;&amp;mdash;: | &amp;mdash;&amp;mdash;-: | | 0 | 1 | F | 1 | 10 | 48067 | | 1 | 2 | M | 56 | 16 | 70072 | | 2 | 3 | M | 25 | 15 | 55117 | | 3 | 4 | M | 45 | 7 | 02460 | | 4 | 5 | M</description>
    </item>
    
    <item>
      <title>Python数据分析之Pandas（五）</title>
      <link>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%94-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%94-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%BA%94/</guid>
      <description>: | &amp;mdash;: | &amp;mdash;: | &amp;mdash;: | &amp;mdash;: | &amp;mdash;: | | 0 | S001 | 怠涵 | 女 | 23 | 山东 | | 1 | S002 | 婉清 | 女 | 25 | 河南 | | 2 | S003 | 溪榕 | 女 | 23 | 湖北 | | 3 | S004 | 漠涓 | 女 | 19 | 陕</description>
    </item>
    
    <item>
      <title>Python数据分析之Pandas（一）</title>
      <link>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%80-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%80-python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bpandas%E4%B8%80/</guid>
      <description>-: | :&amp;mdash;&amp;ndash;: | :&amp;mdash;-: | :&amp;mdash;&amp;mdash;-: | | 0 | 1 | 1 | 4.0 | 964982703 | | 1 | 1 | 3 | 4.0 | 964981247 | | 2 | 1 | 6 | 4.0 | 964982224 | | 3 | 1 | 47 | 5.0 | 964983815 | | 4 | 1 | 50 | 5.0 | 964982931 | In [5]: 1 2 # 查看</description>
    </item>
    
    <item>
      <title>Redis之Java客户端Jedis</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8Bjava%E5%AE%A2%E6%88%B7%E7%AB%AFjedis-redis%E4%B9%8Bjava%E5%AE%A2%E6%88%B7%E7%AB%AFjedis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8Bjava%E5%AE%A2%E6%88%B7%E7%AB%AFjedis-redis%E4%B9%8Bjava%E5%AE%A2%E6%88%B7%E7%AB%AFjedis/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;quot; ); jedis.mset( &amp;ldquo;str1&amp;rdquo; , &amp;ldquo;v1&amp;rdquo; , &amp;ldquo;str2&amp;rdquo; , &amp;ldquo;v2&amp;rdquo; , &amp;ldquo;str3&amp;rdquo; , &amp;ldquo;v3&amp;rdquo; ); System. out .println(jedis.mget( &amp;ldquo;str1&amp;rdquo; , &amp;ldquo;str2&amp;rdquo; , &amp;ldquo;str3&amp;rdquo; )); //list System. out .println( &amp;ldquo;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&amp;rdquo; ); //jedis.lpush(&amp;quot; mylist &amp;ldquo;,&amp;ldquo;v1&amp;rdquo;,&amp;ldquo;v2&amp;rdquo;,&amp;ldquo;v3&amp;rdquo;,&amp;ldquo;v4&amp;rdquo;,&amp;ldquo;v5&amp;rdquo;); List list = jedis.lrange( &amp;ldquo;mylist&amp;rdquo; ,0,-1); for (String element : list) { System. out .println(element); } //set jedis.sadd( &amp;ldquo;orders&amp;rdquo; , &amp;ldquo;jd001&amp;rdquo; ); jedis.sadd( &amp;ldquo;orders&amp;rdquo; , &amp;ldquo;jd002&amp;rdquo; ); jedis.sadd( &amp;ldquo;orders&amp;rdquo; , &amp;ldquo;jd003&amp;rdquo; ); Set set1 = jedis.smembers( &amp;ldquo;orders&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Redis之NoSql入门和概述</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8Bnosql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0-redis%E4%B9%8Bnosql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8Bnosql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0-redis%E4%B9%8Bnosql%E5%85%A5%E9%97%A8%E5%92%8C%E6%A6%82%E8%BF%B0/</guid>
      <description>NoSql入门和概述 1、入门概述 1.1、互联网时代背景下大机遇，为什么用nosql 1.1.1、单机MySQL的美好年代 在90年代，一个网站的</description>
    </item>
    
    <item>
      <title>Redis之持久化</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96-redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96-redis%E4%B9%8B%E6%8C%81%E4%B9%85%E5%8C%96/</guid>
      <description>1、RDB（Redis DataBase） 1.1、是什么 在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它</description>
    </item>
    
    <item>
      <title>Redis之发布订阅</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85-redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85-redis%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</guid>
      <description>1、是什么 进程间的一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 订阅/发布消息图 2、命令 3、案列 先订阅后发布 后才能收</description>
    </item>
    
    <item>
      <title>Redis之复制</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%A4%8D%E5%88%B6-redis%E4%B9%8B%E5%A4%8D%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%A4%8D%E5%88%B6-redis%E4%B9%8B%E5%A4%8D%E5%88%B6/</guid>
      <description>1、是什么 行话：也就是我们所说的主从复制，主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主</description>
    </item>
    
    <item>
      <title>Redis之解析配置文件</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-redis%E4%B9%8B%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-redis%E4%B9%8B%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>解析配置文件Redis.conf 1、它在哪 1.1、地址 记得将它拷贝出来单独执行~ 2、Units单位 配置大小单位,开头定义了一些基本的度量单位</description>
    </item>
    
    <item>
      <title>Redis之入门介绍</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D-redis%E4%B9%8B%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D-redis%E4%B9%8B%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>1、入门概述 1.1、是什么 Redis:REmote DIctionary Server(远程字典服务器) 是完全开源免费的，用C语言编写的，遵守BSD协议，是一个高性能的(key/val</description>
    </item>
    
    <item>
      <title>Redis之事务</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1-redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E4%BA%8B%E5%8A%A1-redis%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>1、是什么 可以一次执行多个命令，本质是一组命令的集合。一个事务中的所有命令都会序列化，按顺序地串行化执行而不会被其它命令插入，不许加塞 2、能</description>
    </item>
    
    <item>
      <title>Redis之数据类型</title>
      <link>yuanshuai1122.github.io/post/redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>当前库就没有了，被移除了 expire key 秒钟：为给定的key设置过期时间 ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期 type key 查看你的key是什么</description>
    </item>
    
    <item>
      <title>Spring5之AOP</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop-spring5%E4%B9%8Baop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop-spring5%E4%B9%8Baop/</guid>
      <description>一、AOP(概念) 1、什么是 AOP (1)面向切面编程(方面) (2)通俗描述:不通过修改源代码方式，在主干功能里面添加新功能 (3)使用登录例子说明</description>
    </item>
    
    <item>
      <title>Spring5之AOP操作</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C-spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C-spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | | 后置通知 | 记录日志(方法已经成功调用) | | 异常通知 | 异常处理 控制事务 | | 最终通知 | 记录日志(方法已经调用，但不一定成功) | 5、相同</description>
    </item>
    
    <item>
      <title>Spring5之IOC</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc-spring5%E4%B9%8Bioc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc-spring5%E4%B9%8Bioc/</guid>
      <description>一、概念和原理 1、什么是 IOC (1)控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 (2)使用 IOC 目的:为了耦合度降低 (3)做入门案例就是</description>
    </item>
    
    <item>
      <title>Spring5之IOC的bean管理</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86-spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86-spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86/</guid>
      <description>一、概念 1、什么是 Bean 管理 (1)Bean 管理指的是两个操作 (2)Spring 创建对象 (3)Spirng 注入属性 2、Bean 管理操作有两种方式 (1)基于 xml 配置文件方式实现 (2)基于注解方式</description>
    </item>
    
    <item>
      <title>Spring5之JdbcTemplate</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bjdbctemplate-spring5%E4%B9%8Bjdbctemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bjdbctemplate-spring5%E4%B9%8Bjdbctemplate/</guid>
      <description>一、概念和准备 1、什么是 JdbcTemplate Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作 2、准备工作 (1)引入相关 jar 包 (2)在 spring 配置文件配置数据库连接池 1 2</description>
    </item>
    
    <item>
      <title>Spring5之初体验</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>一、Spring5 框架概述 1、Spring 是轻量级的开源的 JavaEE 框架 2、Spring 可以解决企业应用开发的复杂性 3、Spring 有两个核心部分:</description>
    </item>
    
    <item>
      <title>Spring5之事务</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1-spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1-spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>一、事务概念 1、什么是事务 (1)事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败 (2)典型场景:银行转账</description>
    </item>
    
    <item>
      <title>Spring5之新功能（Log4j2、@Nullable等）</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2@nullable%E7%AD%89-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2nullable%E7%AD%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2@nullable%E7%AD%89-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2nullable%E7%AD%89/</guid>
      <description>Spring5 框架新功能 1、整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9， 法在代码库中删除 2、Spring 5.0 框架自带了通用的日志封装 (1)Spring5 已经移除 Lo</description>
    </item>
    
    <item>
      <title>Spring5之新功能Webflux</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux/</guid>
      <description>Webflux 1、SpringWebflux 介绍 (1)是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流程响应式编程出现的</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-web开发</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91/</guid>
      <description>BindingAwareModelMap 是Model 也是Map mavContainer.getModel(); 获取到值的 1.4、自定义对象参数： 可以自动类型转换与格式化，可以级联封装。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-单元测试</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | assertEquals | 判断两个对象或两个原始类型是否相等 | | assertNotEquals | 判断两个对象或两个原始类型是否不相等 | | assertSame | 判断两个对象引用是否指向同一个对象 | | assertNotSame</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-基础入门</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</guid>
      <description>组件 &amp;mdash;&amp;gt;** xxxxProperties里面拿值 &amp;mdash;-&amp;gt; application.properties 3.4、最佳实践 引入场景依赖 https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter 查看自动配置了哪些（选做） 自己分析，引入场景对应的自动配置一般都</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-数据访问</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | | default | com.alibaba.druid.filter.stat.StatFilter | | stat | com.alibaba.druid.filter.stat.StatFilter | | mergeStat | com.alibaba.druid.filter.stat.MergeStatFilter | | encoding | com.alibaba.druid.filter.encoding.EncodingConvertFilter | | log4j | com.alibaba.druid.filter.logging.Log4jFilter | | log4j2 | com.alibaba.druid.filter.logging.Log4j2Filter | | slf4j | com.alibaba.druid.filter.logging.Slf4jLogFilter | | commonlogging | com.alibaba.druid.filter.logging.CommonsLogFilter | 慢SQL记录配置 1 2 3 4 5 6 &amp;lt;bean id=&amp;#34;stat-filter&amp;#34; class=&amp;#34;com.alibaba.druid.filter.stat.StatFilter&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;slowSqlMillis&amp;#34; value=&amp;#34;10000&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;logSlowSql&amp;#34; value=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt;</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-原理解析</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
      <description>xxxAutoConfiguration &amp;mdash; 容器中放入组件 &amp;mdash;- 绑定xxxProperties &amp;mdash;-** 配置项 2、自定义starter atguigu-hello-spring-boot-sta</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-指标监控</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | auditevents | 暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。 | | beans | 显示应用程序中所有Spring B</description>
    </item>
    
    <item>
      <title>SpringMVC之常用注解</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>常用注解 1、RequestParam 1.1、使用说明 作用: 把请求中指定名称的参数给控制器中的形参赋值。 属性: value:请求参数中的名称。 r</description>
    </item>
    
    <item>
      <title>SpringMVC之拦截器</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8-springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8-springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description>SpringMVC 中的拦截器 1、拦截器的作用 Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。 用户可以自己定义一些拦截器</description>
    </item>
    
    <item>
      <title>SpringMVC之请求参数的绑定</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A-springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A-springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A/</guid>
      <description>请求参数的绑定 1、绑定说明 1.1 绑定的机制 我们都知道，表单中请求参数都是基于 key=value 的。 SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法</description>
    </item>
    
    <item>
      <title>SpringMVC之入门</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%85%A5%E9%97%A8-springmvc%E4%B9%8B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%85%A5%E9%97%A8-springmvc%E4%B9%8B%E5%85%A5%E9%97%A8/</guid>
      <description>SpringMVC 的基本概念 1、关于三层架构和 MVC 1.1、三层架构 我们的开发架构一般都是基于两种形式，一种是 C/S 架构，也就是客户端/服务器，另一种是 B/S 架构，也就</description>
    </item>
    
    <item>
      <title>SpringMVC之文件上传</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac 分界符 Content-Disposition: form-data; name=&amp;ldquo;userName&amp;rdquo; 协议头 aaa 协议的正文 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac Content-Disposition: form-data; name=&amp;ldquo;file&amp;rdquo;; filename=&amp;ldquo;C:\Users\zhy\Desktop\fileupload_demofile\b.txt&amp;rdquo; Content-Type: text/plain 协议的类型(MIME类型) bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac&amp;ndash; 1.3、借助第三方组件实现文件上传 使用 Commons-fileupload 组件实现文件上传，需要导</description>
    </item>
    
    <item>
      <title>SpringMVC之响应数据和结果视图</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE-springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE-springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE/</guid>
      <description>响应数据和结果视图 1、返回值分类 1.1、字符串 controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。 1 2 3 4 5 6 //指定逻辑</description>
    </item>
    
    <item>
      <title>SpringMVC之异常处理</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>SpringMVC 中的异常处理 1、异常处理的思路 系统中异常包括两类:预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，</description>
    </item>
    
    <item>
      <title>SpringMVC之整合SSM</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm-springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm-springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm/</guid>
      <description>创建数据库和表结构 1 2 3 4 5 6 7 create database ssm; use ssm; create table account( id int primary key auto_increment, name varchar(20), money double ); 在ssm_parent的pom.xml文件中引入坐标依赖 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>Vue之const的使用及注意点</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9-vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9-vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>1.const定义的标识符必须初始化 1 const a; 报错：const标识符未初始化 定义并赋值： 1 const a = 1; 2.const修饰的标识符不能被修改 1 2 const a =</description>
    </item>
    
    <item>
      <title>Vue之ES6对象字面量增强写法</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95-vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95-vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95/</guid>
      <description>1.生成对象的方法 1.利用对象构造函数 1 const obj = new Object(); 2.字面量写法 1 2 3 const obj = { } 2.属性的增强写法 1.ES5 1 2 3 4 5 6 7 8 9 10 const name = &amp;#39;sunny&amp;#39;, age = 18, sex = &amp;#39;male&amp;#39;;</description>
    </item>
    
    <item>
      <title>Vue之js的高阶函数</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>js的高阶函数（ filter()、map()、reduce() ） arr = [20,40,12,232,23,232]; 需求1：找出数组中数值低于100的元素，组成新数组并返回 需求2：对返回</description>
    </item>
    
    <item>
      <title>Vue之Promise</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bpromise-vue%E4%B9%8Bpromise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bpromise-vue%E4%B9%8Bpromise/</guid>
      <description>Promise 一、简单介绍 在介绍Promise之前，得向大家解析几个名词 1.同步和异步 ① 同步 当用户使用js和浏览器发生交互时，执行到某一个模块时系统发现</description>
    </item>
    
    <item>
      <title>Vue之Router（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%BA%8C-vue%E4%B9%8Brouter%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%BA%8C-vue%E4%B9%8Brouter%E4%BA%8C/</guid>
      <description>一、动态路由 1.产生背景 为什么会有动态路由呢？因为在一般的项目中，都会涉及到用户登陆的操作，我们希望某某用户登陆某个网页的时候，能够在该网页</description>
    </item>
    
    <item>
      <title>Vue之Router（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%89-vue%E4%B9%8Brouter%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%89-vue%E4%B9%8Brouter%E4%B8%89/</guid>
      <description>一、router和route的本质 1.router 前面说过，当你使用 this.$router 获取的时候其实就是获取了 router 实例。 首先在 user 页面添加一个按钮，然后通过点击这个按钮来打印</description>
    </item>
    
    <item>
      <title>Vue之Router（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%80-vue%E4%B9%8Brouter%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%80-vue%E4%B9%8Brouter%E4%B8%80/</guid>
      <description>一、前景知识 （一）、基本知识 路由、转送、路由表 路由：我们仨都算是负责运输行业的，但是我只是负责运输线路的确定 路由表：为了避免“转送”送错货物</description>
    </item>
    
    <item>
      <title>Vue之slot插槽</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD-vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD-vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD/</guid>
      <description>slot插槽 一、为什么要使用插槽 在生活中，电脑的USB接口对应不同的设备就提供不同的功能，可以接键盘、鼠标、音响、U盘…… 在组件中，slot</description>
    </item>
    
    <item>
      <title>Vue之Tabbar的实现</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0-vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0-vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>Tabbar实现 一、实现思路 最终的效果如下图所示，下面小编一一为大家解析每个部分如何实现，并附上最终的实现代码。 ① 路由懒加载 首先，肯定有两个</description>
    </item>
    
    <item>
      <title>Vue之v-model</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bv-model-vue%E4%B9%8Bv-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bv-model-vue%E4%B9%8Bv-model/</guid>
      <description>v-model 一、v-model是什么 v-model就是vue的双向绑定的指令，能将页面上控件输入的值同步更新到相关绑定的data属性，也会在更新dat</description>
    </item>
    
    <item>
      <title>Vue之VueCLI</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuecli-vue%E4%B9%8Bvuecli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuecli-vue%E4%B9%8Bvuecli/</guid>
      <description>一、基础知识 1.背景 ​ 当我们只是简单的写几个Vue的简单程序，根本不需要用cli，杀鸡焉用牛刀说的就这个理。 相反，如果用Vue开发大项目时，</description>
    </item>
    
    <item>
      <title>Vue之Vuex（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%BA%8C-vue%E4%B9%8Bvuex%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%BA%8C-vue%E4%B9%8Bvuex%E4%BA%8C/</guid>
      <description>Vuex的getters 一、getters 1.定义 getters 相当于我们之前使用过的计算属性。当数据要经过一系列变化时，我们就可以将这一系列的变化写在</description>
    </item>
    
    <item>
      <title>Vue之Vuex（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%89-vue%E4%B9%8Bvuex%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%89-vue%E4%B9%8Bvuex%E4%B8%89/</guid>
      <description>Vuex的action 一、action 1.产生原因 当在mutations中进行异步操作时，Devtool不能够实时跟踪，导致最终在Devto</description>
    </item>
    
    <item>
      <title>Vue之Vuex（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%80-vue%E4%B9%8Bvuex%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%80-vue%E4%B9%8Bvuex%E4%B8%80/</guid>
      <description>Vuex 一、基本概念 1.定义 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测</description>
    </item>
    
    <item>
      <title>Vue之webpack深入解析</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</guid>
      <description>声明：本文转自coderwhy大佬的简书：https://www.jianshu.com/p/a83ffc6fdf1d 仅供个人学习使用，侵删</description>
    </item>
    
    <item>
      <title>Vue之插值操作</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C-vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C-vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C/</guid>
      <description>Vue插值操作 1.Mustach语法 Mustach语法就是双大括号，所以也有人直接叫双括号语法,我们可以利用其进行基本的拼接和运算 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Vue之初体验</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>Vue初体验 前言：什么是Vue.js 摘自维基百科： Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vu</description>
    </item>
    
    <item>
      <title>Vue之动态绑定属性</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7/</guid>
      <description>Vue之动态绑定 一、v-bind基础使用 v-bind能给元素动态绑定属性 img中的src在大多数情况下都是动态传递过来的数据，并非是写死的，</description>
    </item>
    
    <item>
      <title>Vue之计算属性</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</guid>
      <description>&amp;ndash;&amp;rsquo;, newValue); const names = newValue.split(&amp;rsquo; &amp;lsquo;); this.firstName = names[0]; this.lastName = names[1]; }, get: function () { return this.firstName + &amp;rsquo; &amp;rsquo; + this.lastName } }, // fullName: function () { // return this.firstName + &#39; &#39; + this.lastName // } } }) ``` 三、计算属性和methods对比 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Vue之块级作用域let和var</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar-vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar-vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar/</guid>
      <description>1.背景 js的作者Brendan Eich公开说明过var其实是js语言设计上的错误，但是这种错误多半不能修复和移除，所以大概在十几年前，Br</description>
    </item>
    
    <item>
      <title>Vue之事件监听</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC-vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC-vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</guid>
      <description>&amp;mdash;&amp;ndash;&amp;rsquo;, event); }, btn3Click(abc, event) { console.log(&amp;rsquo;++++++++&amp;rsquo;, abc, event); } } }) // 如果函数需要参数,但是没有传入, 那么函数的形参为undefined // function abc(name) { // console.log(name); // } // // abc() ``` 三、v-on修饰符 3.1</description>
    </item>
    
    <item>
      <title>Vue之书籍购物车案例</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B-vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B-vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B/</guid>
      <description>index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;books.length&amp;#34;&amp;gt; &amp;lt;table&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之条件判断</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid>
      <description>Vue条件判断 一、v-if的使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 v-if=&amp;#34;isShow&amp;#34;&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; {{message}} &amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之循环遍历</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86-vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86-vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</guid>
      <description>Vue循环遍历 一、v-for遍历数组和对象 1.1.遍历数组不显示index（下标） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;item in colors&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;js/vue.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之组件化（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C/</guid>
      <description>一、父组件和子组件的区分 1.1.在Vue实例app中注册组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; /*创建组件构造</description>
    </item>
    
    <item>
      <title>Vue之组件化（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89/</guid>
      <description>一、父子组件的通信&amp;ndash;父传子 一.回顾父子组件 子组件在父组件中注册并使用，在html中使用的是父组件的标签，子组件也会被展示。 1.不</description>
    </item>
    
    <item>
      <title>Vue之组件化（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80/</guid>
      <description>一、组件化思想 1.1、组件化思想 遇到一大堆复杂的问题时，直接上手解决的话是非常困难的。面对这种情况，我们可以将这个大问题细分成许多小问题，逐</description>
    </item>
    
    <item>
      <title>xpath表达式</title>
      <link>yuanshuai1122.github.io/post/xpath%E8%A1%A8%E8%BE%BE%E5%BC%8F-xpath%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/xpath%E8%A1%A8%E8%BE%BE%E5%BC%8F-xpath%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>Python爬虫之xpath表达式 1 2 3 4 5 6 7 8 9 #xpath表达式 #有同学说，我正则用的不好，处理HTML文档很累，有没有其他的方法？ #</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>yuanshuai1122.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/about/</guid>
      <description>原帅 1998年</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之必备基础</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之连接器</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之容器</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之通用组件</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之性能优化</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之整体架构</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>一文通关之MybatisPlus</title>
      <link>yuanshuai1122.github.io/post/%E4%B8%80%E6%96%87%E9%80%9A%E5%85%B3%E4%B9%8Bmybatisplus-%E4%B8%80%E6%96%87%E9%80%9A%E5%85%B3%E4%B9%8Bmybatisplus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E4%B8%80%E6%96%87%E9%80%9A%E5%85%B3%E4%B9%8Bmybatisplus-%E4%B8%80%E6%96%87%E9%80%9A%E5%85%B3%E4%B9%8Bmybatisplus/</guid>
      <description>MyBatisPlus 1、MyBatisPlus概述 需要的基础:把我的MyBatis、Spring、SpringMVC就可以学习这个了! 为什么要学习它呢?MyB</description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>yuanshuai1122.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>将正则表达式转换成内部格式，提高执行效率 strr=&amp;ldquo;PYTHON666Java&amp;rdquo; pat=re.compile(r&amp;quot;Python&amp;quot;,re.I) #模式修正符：忽略大小写 print(pat.search(strr)) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ```python import re #match函数和search函</description>
    </item>
    
  </channel>
</rss>
