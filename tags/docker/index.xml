<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on 🧀 - 你好</title>
    <link>yuanshuai1122.github.io/tags/docker/</link>
    <description>Recent content in docker on 🧀 - 你好</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Jul 2023 18:12:20 +0000</lastBuildDate><atom:link href="yuanshuai1122.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker安装Kibana和Fscrawler</title>
      <link>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85kibana%E5%92%8Cfscrawler/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85kibana%E5%92%8Cfscrawler/</guid>
      <description>一、安装Kibana 1.1 Kibana是什么 引用ES官方说法 https://www.elastic.co/cn/what-is/kibana Kibana 是一款免费且开放的前端应用程序，其基础是 Elastic Stack，可以为 Elasticsearch 中索引的数据提供搜</description>
    </item>
    
    <item>
      <title>docker安装部署ElasticSearch（单机版）</title>
      <link>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2elasticsearch%E5%8D%95%E6%9C%BA%E7%89%88/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2elasticsearch%E5%8D%95%E6%9C%BA%E7%89%88/</guid>
      <description>一、ElasticSearch安装部署 什么是ElasticSearch？ 简单来说，我们的目标是帮助每个人更快地找到所需内容，从需要通过内网获</description>
    </item>
    
    <item>
      <title>ElasticSearch-查询</title>
      <link>yuanshuai1122.github.io/post/elasticsearch-%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/elasticsearch-%E6%9F%A5%E8%AF%A2/</guid>
      <description>1.DSL查询文档 elasticsearch的查询依然是基于JSON风格的DSL来实现的。 1.1.DSL查询分类 Elasticsearch提</description>
    </item>
    
    <item>
      <title>ElasticSearch-高级特性</title>
      <link>yuanshuai1122.github.io/post/elasticsearch-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/elasticsearch-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>分布式搜索引擎03 1.数据聚合 **聚合（aggregations）**可以让我们极其方便的实现对数据的统计、分析、运算。例如： 什么品牌的手机</description>
    </item>
    
    <item>
      <title>Kubernetes-Pod控制器详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-pod%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-pod%E6%8E%A7%E5%88%B6%E5%99%A8%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Pod控制器介绍 Pod是kubernetes的最小管理单元，在kubernetes中，按照pod的创建方式可以将其分为两类： 自主式pod</description>
    </item>
    
    <item>
      <title>Kubernetes-Pod详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-pod%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-pod%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Pod介绍 1.1 Pod结构 每个Pod中都可以包含一个或者多个容器，这些容器可以分为两类： 用户程序所在的容器，数量可多可少 Pause容器，这是</description>
    </item>
    
    <item>
      <title>Kubernetes-Service详解</title>
      <link>yuanshuai1122.github.io/post/kubernetes-service%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-service%E8%AF%A6%E8%A7%A3/</guid>
      <description>一、Service介绍 在kubernetes中，pod是应用程序的载体，我们可以通过pod的ip来访问应用程序，但是pod的ip地址不是固定</description>
    </item>
    
    <item>
      <title>Kubernetes-安全认证</title>
      <link>yuanshuai1122.github.io/post/kubernetes-%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81/</guid>
      <description>一、访问控制概述 Kubernetes作为一个分布式集群的管理工具，保证集群的安全性是其一个重要的任务。所谓的安全性其实就是保证对Kubern</description>
    </item>
    
    <item>
      <title>Kubernetes-数据存储</title>
      <link>yuanshuai1122.github.io/post/kubernetes-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid>
      <description>在前面已经提到，容器的生命周期可能很短，会被频繁地创建和销毁。那么容器在销毁时，保存在容器中的数据也会被清除。这种结果对用户来说，在某些情况</description>
    </item>
    
    <item>
      <title>Kubernetes尝鲜-部署nginx服务</title>
      <link>yuanshuai1122.github.io/post/kubernetes%E5%B0%9D%E9%B2%9C-%E9%83%A8%E7%BD%B2nginx%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 19 Jul 2023 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/kubernetes%E5%B0%9D%E9%B2%9C-%E9%83%A8%E7%BD%B2nginx%E6%9C%8D%E5%8A%A1/</guid>
      <description>本章节将介绍如何在kubernetes集群中部署一个nginx服务，并且能够对其进行访问。 一、Namespace Namespace是kube</description>
    </item>
    
    <item>
      <title>白话容器基础（四）：重新认识Docker容器</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Tue, 19 Jul 2022 18:49:55 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E5%9B%9B%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86docker%E5%AE%B9%E5%99%A8/</guid>
      <description>白话容器基础（四）：重新认识Docker容器 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在前面的三次分享中，我分别从 Linux</description>
    </item>
    
    <item>
      <title>白话容器基础（三）：深入理解容器镜像</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F-bai-hua-rong-qi-ji-chu--san--shen-ru-li-jie-rong-qi-jing-xiang/</link>
      <pubDate>Tue, 19 Jul 2022 18:35:50 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F-bai-hua-rong-qi-ji-chu--san--shen-ru-li-jie-rong-qi-jing-xiang/</guid>
      <description>白话容器基础（三）：深入理解容器镜像 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在前两次的分享中，我讲解了 Linux 容器最基础</description>
    </item>
    
    <item>
      <title>白话容器基础（二）：隔离与限制</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</link>
      <pubDate>Tue, 19 Jul 2022 18:21:31 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6-%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%BA%8C%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6/</guid>
      <description>白话容器基础（二）：隔离与限制 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 在上一篇文章中，我详细介绍了 Linux 容器中用来实现</description>
    </item>
    
    <item>
      <title>白话容器基础（一）：从进程说开去</title>
      <link>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BB%8E%E8%BF%9B%E7%A8%8B%E8%AF%B4%E5%BC%80%E5%8E%BB-bai-hua-rong-qi-ji-chu--yi--cong-jin-cheng-shuo-kai-qu/</link>
      <pubDate>Tue, 19 Jul 2022 18:12:20 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E7%99%BD%E8%AF%9D%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E4%B8%80%E4%BB%8E%E8%BF%9B%E7%A8%8B%E8%AF%B4%E5%BC%80%E5%8E%BB-bai-hua-rong-qi-ji-chu--yi--cong-jin-cheng-shuo-kai-qu/</guid>
      <description>白话容器基础（一）：从进程说开去 本文整理于极客时间： 深入剖析 Kubernetes (geekbang.org)，侵删。 先明白一个道理： 容器本身没有价值，有价值的</description>
    </item>
    
    <item>
      <title>Docker之DockerFile解析</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90-docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90-docker%E4%B9%8Bdockerfile%E8%A7%A3%E6%9E%90/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;ndash;welcome&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; &amp;lt;%=&amp;ldquo;i am in docker tomcat self &amp;ldquo;%&amp;gt; &amp;lt;% System.out.println(&amp;quot;=============docker tomcat self&amp;rdquo;);%&amp;gt; ``` 测试 5、小总结</description>
    </item>
    
    <item>
      <title>Docker之安装</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%AE%89%E8%A3%85/</guid>
      <description>Docker安装步骤 1、CentOS6.8安装Docker yum install -y epel-release 1 yum install -y epel-release Docker使用EPEL发布，RHEL系的OS首先要确保已经持有</description>
    </item>
    
    <item>
      <title>Docker之本地镜像推送到阿里云</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91-docker%E4%B9%8B%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      <description>本地镜像发布到阿里云 1、本地镜像发布到阿里云流程 2、镜像的生成方法 前面的DockerFile 从容器创建一个新的镜像 1 docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]] OPTI</description>
    </item>
    
    <item>
      <title>Docker之常用安装</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%AE%89%E8%A3%85/</guid>
      <description>Docker常用安装 1、 总体步骤 搜索镜像 拉取镜像 查看镜像 启动镜像 停止容器 移除容器 2、安装tomcat docker hub上面查找tomcat镜像 1 docker search tomcat</description>
    </item>
    
    <item>
      <title>Docker之常用命令</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-docker%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Docker常用命令 1、帮助命令 1 docker version 1 docker info 1 docker --help 2、镜像命令 2.1、docker images 1 docker images 列出本地主机上的镜像 各个选项说明: REPOSITO</description>
    </item>
    
    <item>
      <title>Docker之简介</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E7%AE%80%E4%BB%8B-docker%E4%B9%8B%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E7%AE%80%E4%BB%8B-docker%E4%B9%8B%E7%AE%80%E4%BB%8B/</guid>
      <description>Docker简介 1、是什么 1.1、问题：为什么会有docker出现 一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维</description>
    </item>
    
    <item>
      <title>Docker之镜像</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E9%95%9C%E5%83%8F-docker%E4%B9%8B%E9%95%9C%E5%83%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E9%95%9C%E5%83%8F-docker%E4%B9%8B%E9%95%9C%E5%83%8F/</guid>
      <description>Docker 镜像 1、是什么 镜像是一种轻量级、可执行的独立软件包， 用来打包软件运行环境和基于运行环境开发的软件 ，它包含运行某个软件所需的所有内容，包括代</description>
    </item>
    
    <item>
      <title>Docker之容器数据卷</title>
      <link>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7-docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7-docker%E4%B9%8B%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</guid>
      <description>Docker容器数据卷 1、是什么 先来看看Docker的理念： 将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望</description>
    </item>
    
  </channel>
</rss>
