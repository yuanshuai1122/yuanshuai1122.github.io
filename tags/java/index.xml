<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 🧀 - 你好</title>
    <link>yuanshuai1122.github.io/tags/java/</link>
    <description>Recent content in Java on 🧀 - 你好</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Dec 2021 18:17:42 +0000</lastBuildDate><atom:link href="yuanshuai1122.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java强化之线程池</title>
      <link>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Fri, 03 Dec 2021 18:17:42 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>Java强化之线程池 一、什么是线程池 线程池其实就是一种多线程处理形式，处理过程中可以将任务添加到队列中，然后在创建线程后自动启动这些任务。这</description>
    </item>
    
    <item>
      <title>Java强化之泛型</title>
      <link>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Fri, 03 Dec 2021 18:17:37 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B-java%E5%BC%BA%E5%8C%96%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid>
      <description>Java强化之泛型 一、什么是泛型 1.背景： JAVA推出泛型以前，程序员可以构建一个元素类型为Object的集合，该集合能够存储任意的数据类型</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第10章对象的实例化内存布局与访问定位</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC10%E7%AB%A0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</guid>
      <description>第 10 章 对象的实例化内存布局与访问定位 1、对象的实例化 大厂面试题 美团： 对象在JVM中是怎么存储的？ 对象头信息里面有哪些东西？ 蚂蚁金服： 二面：j</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第11章直接内存</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC11%E7%AB%A0%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</guid>
      <description>第 11 章 直接内存 1、直接内存概述 直接内存 不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第12章执行引擎</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC12%E7%AB%A0%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</guid>
      <description>第 12 章 执行引擎 1、执行引擎概述 执行引擎位置 执行引擎属于JVM的下层，里面包括：解释器、即时编译器、垃圾回收器 1.1、执行引擎概述 执行引擎概述</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第13章StringTable</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC13%E7%AB%A0stringtable/</guid>
      <description>第 13 章 StringTable 1、String 的基本特性 1.1、String 概述 String 的概述 String：字符串，使用一对 “” 引起来表示 1 2 String s1 = &amp;#34;mogublog&amp;#34; ; // 字面量的定义方</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第14章垃圾回收概述</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC14%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0/</guid>
      <description>第 14 章 垃圾回收概述 1、垃圾收集面试题 回顾 JVM 学习路线 关于垃圾收集 Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C语言没有垃圾收集技</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第15章垃圾回收相关算法</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC15%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</guid>
      <description>第 15 章 垃圾回收相关算法 1、标记阶段：引用计数器 1.1、标记阶段的目的 垃圾标记阶段：判断对象是否存活 在堆里存放着几乎所有的Java对象实例，在</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第16章垃圾回收相关概念</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC16%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>第 16 章 垃圾回收相关概念 1、System.gc() 的理解 1.1、System.gc() 方法 System.gc() 方法 在默认情况下，通过System.gc()者Ru</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第17章垃圾回收器</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC17%E7%AB%A0%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>第 17 章 垃圾回收器 1、GC 分类与性能指标 1.1、垃圾回收器概述与分类 垃圾回收器概述 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第1章JVM和Java体系架构</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC1%E7%AB%A0jvm%E5%92%8Cjava%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84/</guid>
      <description>第 1 章 JVM 和 Java 体系架构 1、JVM 前言 作为Java工程师的你曾被伤害过吗？你是否也遇到过这些问题？ 运行着的线上系统突然卡死，系统无法访问，甚至直</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第2章类加载子系统</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC2%E7%AB%A0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>第 2 章 类加载子系统 1、内存结构概述 如果自己想手写一个Java虚拟机的话，主要考虑哪些结构呢？ 类加载器 执行引擎 完整框图： 2、类加载子系统 类加载</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第3章运行时数据区概述及线程</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC3%E7%AB%A0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%BA%BF%E7%A8%8B/</guid>
      <description>第 3 章 运行时数据区概述及线程 1、前言 本节主要讲的是运行时数据区，也就是下图这部分，它是在类加载完成后的阶段 当我们通过前面的：类的加载 &amp;ndash;&amp;gt; 验证 &amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第4章程序计数器</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC4%E7%AB%A0%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description>第 4 章 程序计数器 1、PC 寄存器概述 文档网址 https://docs.oracle.com/javase/specs/jvms/se8/html/index.html PC 寄存器介绍 JVM中的程序计数寄存器（Program Counter Register）中，Register的命</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第5章虚拟机栈</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC5%E7%AB%A0%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</guid>
      <description>第 5 章 虚拟机栈 1、虚拟机栈概述 1.1、虚拟机栈的出现背景 文档网址 https://docs.oracle.com/javase/specs/jvms/se8/html/index.html 虚拟机栈出现的背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第6章本地方法接口</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC6%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</guid>
      <description>第 6 章 本地方法接口 1、本地方法 什么是本地方法？ 简单地讲，一个Native Method是一个Java调用非Java代码的接囗 一个Native M</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第7章本地方法栈</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC7%E7%AB%A0%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</guid>
      <description>第 7 章 本地方法栈 1、本地方法栈 本地方法栈的特点 Java虚拟机栈于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。 本地方法栈，也是</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第8章堆</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC8%E7%AB%A0%E5%A0%86/</guid>
      <description>第 8 章 堆 1、堆的核心概述 1.1、认识堆内存 堆与进程 堆针对一个JVM进程来说是唯一的，也就是一个进程只有一个JVM 但是进程包含多个线程，他们是</description>
    </item>
    
    <item>
      <title>JVM内存与垃圾回收篇第9章方法区</title>
      <link>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA-jvm%E5%86%85%E5%AD%98%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AF%87%E7%AC%AC9%E7%AB%A0%E6%96%B9%E6%B3%95%E5%8C%BA/</guid>
      <description>第 9 章 方法区 1、栈 堆 方法区的交互关系 从内存结构来看 这次所讲述的是运行时数据区的最后一个部分 从线程共享与否的角度来看 ThreadLocal：如</description>
    </item>
    
    <item>
      <title>Spring5之AOP</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop-spring5%E4%B9%8Baop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop-spring5%E4%B9%8Baop/</guid>
      <description>一、AOP(概念) 1、什么是 AOP (1)面向切面编程(方面) (2)通俗描述:不通过修改源代码方式，在主干功能里面添加新功能 (3)使用登录例子说明</description>
    </item>
    
    <item>
      <title>Spring5之AOP操作</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C-spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C-spring5%E4%B9%8Baop%E6%93%8D%E4%BD%9C/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | | 后置通知 | 记录日志(方法已经成功调用) | | 异常通知 | 异常处理 控制事务 | | 最终通知 | 记录日志(方法已经调用，但不一定成功) | 5、相同</description>
    </item>
    
    <item>
      <title>Spring5之IOC</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc-spring5%E4%B9%8Bioc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc-spring5%E4%B9%8Bioc/</guid>
      <description>一、概念和原理 1、什么是 IOC (1)控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理 (2)使用 IOC 目的:为了耦合度降低 (3)做入门案例就是</description>
    </item>
    
    <item>
      <title>Spring5之IOC的bean管理</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86-spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86-spring5%E4%B9%8Bioc%E7%9A%84bean%E7%AE%A1%E7%90%86/</guid>
      <description>一、概念 1、什么是 Bean 管理 (1)Bean 管理指的是两个操作 (2)Spring 创建对象 (3)Spirng 注入属性 2、Bean 管理操作有两种方式 (1)基于 xml 配置文件方式实现 (2)基于注解方式</description>
    </item>
    
    <item>
      <title>Spring5之JdbcTemplate</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8Bjdbctemplate-spring5%E4%B9%8Bjdbctemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8Bjdbctemplate-spring5%E4%B9%8Bjdbctemplate/</guid>
      <description>一、概念和准备 1、什么是 JdbcTemplate Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作 2、准备工作 (1)引入相关 jar 包 (2)在 spring 配置文件配置数据库连接池 1 2</description>
    </item>
    
    <item>
      <title>Spring5之初体验</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-spring5%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>一、Spring5 框架概述 1、Spring 是轻量级的开源的 JavaEE 框架 2、Spring 可以解决企业应用开发的复杂性 3、Spring 有两个核心部分:</description>
    </item>
    
    <item>
      <title>Spring5之事务</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1-spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1-spring5%E4%B9%8B%E4%BA%8B%E5%8A%A1/</guid>
      <description>一、事务概念 1、什么是事务 (1)事务是数据库操作最基本单元，逻辑上一组操作，要么都成功，如果有一个失败所有操 作都失败 (2)典型场景:银行转账</description>
    </item>
    
    <item>
      <title>Spring5之新功能（Log4j2、@Nullable等）</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2@nullable%E7%AD%89-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2nullable%E7%AD%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2@nullable%E7%AD%89-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDlog4j2nullable%E7%AD%89/</guid>
      <description>Spring5 框架新功能 1、整个 Spring5 框架的代码基于 Java8，运行时兼容 JDK9， 法在代码库中删除 2、Spring 5.0 框架自带了通用的日志封装 (1)Spring5 已经移除 Lo</description>
    </item>
    
    <item>
      <title>Spring5之新功能Webflux</title>
      <link>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux-spring5%E4%B9%8B%E6%96%B0%E5%8A%9F%E8%83%BDwebflux/</guid>
      <description>Webflux 1、SpringWebflux 介绍 (1)是 Spring5 添加新的模块，用于 web 开发的，功能和 SpringMVC 类似的，Webflux 使用 当前一种比较流程响应式编程出现的</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-web开发</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-web%E5%BC%80%E5%8F%91/</guid>
      <description>BindingAwareModelMap 是Model 也是Map mavContainer.getModel(); 获取到值的 1.4、自定义对象参数： 可以自动类型转换与格式化，可以级联封装。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-单元测试</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | assertEquals | 判断两个对象或两个原始类型是否相等 | | assertNotEquals | 判断两个对象或两个原始类型是否不相等 | | assertSame | 判断两个对象引用是否指向同一个对象 | | assertNotSame</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-基础入门</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</guid>
      <description>组件 &amp;mdash;&amp;gt;** xxxxProperties里面拿值 &amp;mdash;-&amp;gt; application.properties 3.4、最佳实践 引入场景依赖 https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter 查看自动配置了哪些（选做） 自己分析，引入场景对应的自动配置一般都</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-数据访问</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | | default | com.alibaba.druid.filter.stat.StatFilter | | stat | com.alibaba.druid.filter.stat.StatFilter | | mergeStat | com.alibaba.druid.filter.stat.MergeStatFilter | | encoding | com.alibaba.druid.filter.encoding.EncodingConvertFilter | | log4j | com.alibaba.druid.filter.logging.Log4jFilter | | log4j2 | com.alibaba.druid.filter.logging.Log4j2Filter | | slf4j | com.alibaba.druid.filter.logging.Slf4jLogFilter | | commonlogging | com.alibaba.druid.filter.logging.CommonsLogFilter | 慢SQL记录配置 1 2 3 4 5 6 &amp;lt;bean id=&amp;#34;stat-filter&amp;#34; class=&amp;#34;com.alibaba.druid.filter.stat.StatFilter&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;slowSqlMillis&amp;#34; value=&amp;#34;10000&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;logSlowSql&amp;#34; value=&amp;#34;true&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt;</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-原理解析</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
      <description>xxxAutoConfiguration &amp;mdash; 容器中放入组件 &amp;mdash;- 绑定xxxProperties &amp;mdash;-** 配置项 2、自定义starter atguigu-hello-spring-boot-sta</description>
    </item>
    
    <item>
      <title>SpringBoot2核心技术-指标监控</title>
      <link>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7-springboot2%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E6%8C%87%E6%A0%87%E7%9B%91%E6%8E%A7/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | | auditevents | 暴露当前应用程序的审核事件信息。需要一个AuditEventRepository组件。 | | beans | 显示应用程序中所有Spring B</description>
    </item>
    
    <item>
      <title>SpringMVC之常用注解</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3-springmvc%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</guid>
      <description>常用注解 1、RequestParam 1.1、使用说明 作用: 把请求中指定名称的参数给控制器中的形参赋值。 属性: value:请求参数中的名称。 r</description>
    </item>
    
    <item>
      <title>SpringMVC之拦截器</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8-springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8-springmvc%E4%B9%8B%E6%8B%A6%E6%88%AA%E5%99%A8/</guid>
      <description>SpringMVC 中的拦截器 1、拦截器的作用 Spring MVC 的处理器拦截器类似于 Servlet 开发中的过滤器 Filter，用于对处理器进行预处理和后处理。 用户可以自己定义一些拦截器</description>
    </item>
    
    <item>
      <title>SpringMVC之请求参数的绑定</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A-springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A-springmvc%E4%B9%8B%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E7%BB%91%E5%AE%9A/</guid>
      <description>请求参数的绑定 1、绑定说明 1.1 绑定的机制 我们都知道，表单中请求参数都是基于 key=value 的。 SpringMVC 绑定请求参数的过程是通过把表单提交请求参数，作为控制器中方法</description>
    </item>
    
    <item>
      <title>SpringMVC之入门</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%85%A5%E9%97%A8-springmvc%E4%B9%8B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%85%A5%E9%97%A8-springmvc%E4%B9%8B%E5%85%A5%E9%97%A8/</guid>
      <description>SpringMVC 的基本概念 1、关于三层架构和 MVC 1.1、三层架构 我们的开发架构一般都是基于两种形式，一种是 C/S 架构，也就是客户端/服务器，另一种是 B/S 架构，也就</description>
    </item>
    
    <item>
      <title>SpringMVC之文件上传</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid>
      <description>&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac 分界符 Content-Disposition: form-data; name=&amp;ldquo;userName&amp;rdquo; 协议头 aaa 协议的正文 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac Content-Disposition: form-data; name=&amp;ldquo;file&amp;rdquo;; filename=&amp;ldquo;C:\Users\zhy\Desktop\fileupload_demofile\b.txt&amp;rdquo; Content-Type: text/plain 协议的类型(MIME类型) bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;7de1a433602ac&amp;ndash; 1.3、借助第三方组件实现文件上传 使用 Commons-fileupload 组件实现文件上传，需要导</description>
    </item>
    
    <item>
      <title>SpringMVC之响应数据和结果视图</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE-springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE-springmvc%E4%B9%8B%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E5%92%8C%E7%BB%93%E6%9E%9C%E8%A7%86%E5%9B%BE/</guid>
      <description>响应数据和结果视图 1、返回值分类 1.1、字符串 controller 方法返回字符串可以指定逻辑视图名，通过视图解析器解析为物理视图地址。 1 2 3 4 5 6 //指定逻辑</description>
    </item>
    
    <item>
      <title>SpringMVC之异常处理</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86-springmvc%E4%B9%8B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>SpringMVC 中的异常处理 1、异常处理的思路 系统中异常包括两类:预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，</description>
    </item>
    
    <item>
      <title>SpringMVC之整合SSM</title>
      <link>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm-springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm-springmvc%E4%B9%8B%E6%95%B4%E5%90%88ssm/</guid>
      <description>创建数据库和表结构 1 2 3 4 5 6 7 create database ssm; use ssm; create table account( id int primary key auto_increment, name varchar(20), money double ); 在ssm_parent的pom.xml文件中引入坐标依赖 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之必备基础</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%BF%85%E5%A4%87%E5%9F%BA%E7%A1%80/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之连接器</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E8%BF%9E%E6%8E%A5%E5%99%A8/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之容器</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E5%AE%B9%E5%99%A8/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之通用组件</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E9%80%9A%E7%94%A8%E7%BB%84%E4%BB%B6/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之性能优化</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
    <item>
      <title>深入拆解Tomcat和Jetty之整体架构</title>
      <link>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84-%E6%B7%B1%E5%85%A5%E6%8B%86%E8%A7%A3tomcat%E5%92%8Cjetty%E4%B9%8B%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <description>本系列文章转自极客时间大佬李号双的专栏《深入拆解Tomcat &amp;amp; Jetty》 链接：https://time.geekbang.org/colu</description>
    </item>
    
  </channel>
</rss>
