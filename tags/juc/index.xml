<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>juc - 标签 - CN.yuanshuai</title>
    <link>http://blog.yuanshuaicn.com/tags/juc/</link>
    <description>juc - 标签 - CN.yuanshuai</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 29 Aug 2022 12:36:05 &#43;0000</lastBuildDate><atom:link href="http://blog.yuanshuaicn.com/tags/juc/" rel="self" type="application/rss+xml" /><item>
  <title>死磕juc（六）CAS</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E5%85%ADcas-si-ke-juc-liu-cas/</link>
  <pubDate>Mon, 29 Aug 2022 12:36:05 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E5%85%ADcas-si-ke-juc-liu-cas/</guid>
  <description><![CDATA[CAS 一、没有CAS之前 1.1 多线程环境不使用原子类保证线程安全（基本数据类型） public class T3 { volatile int number = 0; //读取 public int getNumber() { return number; } //写入加锁保证原子性 public synchronized void]]></description>
</item>
<item>
  <title>死磕juc（五）volatile与Java内存模型</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%94volatile%E4%B8%8Ejava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-si-ke-juc-wu-volatile-yu-java-nei-cun-mo-xing/</link>
  <pubDate>Mon, 29 Aug 2022 12:35:28 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%94volatile%E4%B8%8Ejava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B-si-ke-juc-wu-volatile-yu-java-nei-cun-mo-xing/</guid>
  <description><![CDATA[volatile与Java内存模型 一、被volatile修改的变量有2大特点 1.1 特点 可见性 有序性 1.2 volatile的内存语义 当写一个volat]]></description>
</item>
<item>
  <title>死磕juc（四）Java内存模型之JMM</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E5%9B%9Bjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bjmm-si-ke-juc-si-java-nei-cun-mo-xing-zhi-jmm/</link>
  <pubDate>Wed, 24 Aug 2022 13:20:31 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E5%9B%9Bjava%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B9%8Bjmm-si-ke-juc-si-java-nei-cun-mo-xing-zhi-jmm/</guid>
  <description><![CDATA[Java内存模型之JMM 一、计算机硬件存储体系 计算机存储结构，从本地磁盘到主存到CPU缓存，也就是从硬盘到内存，到CPU。一般对应的程序的操]]></description>
</item>
<item>
  <title>死磕juc（三）LockSupport与线程中断</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD-%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</link>
  <pubDate>Mon, 15 Aug 2022 14:02:41 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD-%E6%AD%BB%E7%A3%95juc%E4%B8%89locksupport%E4%B8%8E%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</guid>
  <description><![CDATA[LockSupport与线程中断 一、线程中断机制 1.1 什么是中断 首先 一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止。 所以，]]></description>
</item>
<item>
  <title>死磕juc（二）java的“锁”事（2）</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B2-si-ke-juc-er-java-de--suo--shi-2/</link>
  <pubDate>Mon, 15 Aug 2022 12:43:29 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B2-si-ke-juc-er-java-de--suo--shi-2/</guid>
  <description><![CDATA[java的”锁“事（2） 一、公平锁和非公平锁 1.1 从ReentrantLock卖票编码演示公平和非公平现象 class Ticket { private int number = 30; ReentrantLock lock = new ReentrantLock(); // 默认 ReentrantLock lock =]]></description>
</item>
<item>
  <title>死磕juc（二）java的“锁”事（1）</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1-%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1/</link>
  <pubDate>Tue, 09 Aug 2022 20:51:10 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1-%E6%AD%BB%E7%A3%95juc%E4%BA%8Cjava%E7%9A%84%E9%94%81%E4%BA%8B1/</guid>
  <description><![CDATA[java的”锁“事（1） 一、乐观锁和悲观锁 1.1 悲观锁 认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不]]></description>
</item>
<item>
  <title>死磕Juc（一）之CompletableFuture</title>
  <link>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%B8%80%E4%B9%8Bcompletablefuture-2022-08-03-13-31-28/</link>
  <pubDate>Wed, 03 Aug 2022 13:31:27 &#43;0000</pubDate>
  <author>作者</author>
  <guid>http://blog.yuanshuaicn.com/posts/%E6%AD%BB%E7%A3%95juc%E4%B8%80%E4%B9%8Bcompletablefuture-2022-08-03-13-31-28/</guid>
  <description><![CDATA[死磕Juc（一）之CompletableFuture 一、Future和Callable接口 Future接口定义了操作异步任务执行一些方法，如]]></description>
</item>
</channel>
</rss>
