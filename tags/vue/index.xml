<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on 🧀 - 你好</title>
    <link>yuanshuai1122.github.io/tags/vue/</link>
    <description>Recent content in Vue on 🧀 - 你好</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language><atom:link href="yuanshuai1122.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue之const的使用及注意点</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9-vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9-vue%E4%B9%8Bconst%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E7%82%B9/</guid>
      <description>1.const定义的标识符必须初始化 1 const a; 报错：const标识符未初始化 定义并赋值： 1 const a = 1; 2.const修饰的标识符不能被修改 1 2 const a =</description>
    </item>
    
    <item>
      <title>Vue之ES6对象字面量增强写法</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95-vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95-vue%E4%B9%8Bes6%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E5%A2%9E%E5%BC%BA%E5%86%99%E6%B3%95/</guid>
      <description>1.生成对象的方法 1.利用对象构造函数 1 const obj = new Object(); 2.字面量写法 1 2 3 const obj = { } 2.属性的增强写法 1.ES5 1 2 3 4 5 6 7 8 9 10 const name = &amp;#39;sunny&amp;#39;, age = 18, sex = &amp;#39;male&amp;#39;;</description>
    </item>
    
    <item>
      <title>Vue之js的高阶函数</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0-vue%E4%B9%8Bjs%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</guid>
      <description>js的高阶函数（ filter()、map()、reduce() ） arr = [20,40,12,232,23,232]; 需求1：找出数组中数值低于100的元素，组成新数组并返回 需求2：对返回</description>
    </item>
    
    <item>
      <title>Vue之Promise</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bpromise-vue%E4%B9%8Bpromise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bpromise-vue%E4%B9%8Bpromise/</guid>
      <description>Promise 一、简单介绍 在介绍Promise之前，得向大家解析几个名词 1.同步和异步 ① 同步 当用户使用js和浏览器发生交互时，执行到某一个模块时系统发现</description>
    </item>
    
    <item>
      <title>Vue之Router（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%BA%8C-vue%E4%B9%8Brouter%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%BA%8C-vue%E4%B9%8Brouter%E4%BA%8C/</guid>
      <description>一、动态路由 1.产生背景 为什么会有动态路由呢？因为在一般的项目中，都会涉及到用户登陆的操作，我们希望某某用户登陆某个网页的时候，能够在该网页</description>
    </item>
    
    <item>
      <title>Vue之Router（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%89-vue%E4%B9%8Brouter%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%89-vue%E4%B9%8Brouter%E4%B8%89/</guid>
      <description>一、router和route的本质 1.router 前面说过，当你使用 this.$router 获取的时候其实就是获取了 router 实例。 首先在 user 页面添加一个按钮，然后通过点击这个按钮来打印</description>
    </item>
    
    <item>
      <title>Vue之Router（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%80-vue%E4%B9%8Brouter%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Brouter%E4%B8%80-vue%E4%B9%8Brouter%E4%B8%80/</guid>
      <description>一、前景知识 （一）、基本知识 路由、转送、路由表 路由：我们仨都算是负责运输行业的，但是我只是负责运输线路的确定 路由表：为了避免“转送”送错货物</description>
    </item>
    
    <item>
      <title>Vue之slot插槽</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD-vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD-vue%E4%B9%8Bslot%E6%8F%92%E6%A7%BD/</guid>
      <description>slot插槽 一、为什么要使用插槽 在生活中，电脑的USB接口对应不同的设备就提供不同的功能，可以接键盘、鼠标、音响、U盘…… 在组件中，slot</description>
    </item>
    
    <item>
      <title>Vue之Tabbar的实现</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0-vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0-vue%E4%B9%8Btabbar%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>Tabbar实现 一、实现思路 最终的效果如下图所示，下面小编一一为大家解析每个部分如何实现，并附上最终的实现代码。 ① 路由懒加载 首先，肯定有两个</description>
    </item>
    
    <item>
      <title>Vue之v-model</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bv-model-vue%E4%B9%8Bv-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bv-model-vue%E4%B9%8Bv-model/</guid>
      <description>v-model 一、v-model是什么 v-model就是vue的双向绑定的指令，能将页面上控件输入的值同步更新到相关绑定的data属性，也会在更新dat</description>
    </item>
    
    <item>
      <title>Vue之VueCLI</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuecli-vue%E4%B9%8Bvuecli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuecli-vue%E4%B9%8Bvuecli/</guid>
      <description>一、基础知识 1.背景 ​ 当我们只是简单的写几个Vue的简单程序，根本不需要用cli，杀鸡焉用牛刀说的就这个理。 相反，如果用Vue开发大项目时，</description>
    </item>
    
    <item>
      <title>Vue之Vuex（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%BA%8C-vue%E4%B9%8Bvuex%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%BA%8C-vue%E4%B9%8Bvuex%E4%BA%8C/</guid>
      <description>Vuex的getters 一、getters 1.定义 getters 相当于我们之前使用过的计算属性。当数据要经过一系列变化时，我们就可以将这一系列的变化写在</description>
    </item>
    
    <item>
      <title>Vue之Vuex（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%89-vue%E4%B9%8Bvuex%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%89-vue%E4%B9%8Bvuex%E4%B8%89/</guid>
      <description>Vuex的action 一、action 1.产生原因 当在mutations中进行异步操作时，Devtool不能够实时跟踪，导致最终在Devto</description>
    </item>
    
    <item>
      <title>Vue之Vuex（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%80-vue%E4%B9%8Bvuex%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bvuex%E4%B8%80-vue%E4%B9%8Bvuex%E4%B8%80/</guid>
      <description>Vuex 一、基本概念 1.定义 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用 集中式存储管理 应用的所有组件的状态，并以相应的规则保证状态以一种可预测</description>
    </item>
    
    <item>
      <title>Vue之webpack深入解析</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90-vue%E4%B9%8Bwebpack%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</guid>
      <description>声明：本文转自coderwhy大佬的简书：https://www.jianshu.com/p/a83ffc6fdf1d 仅供个人学习使用，侵删</description>
    </item>
    
    <item>
      <title>Vue之插值操作</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C-vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C-vue%E4%B9%8B%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9C/</guid>
      <description>Vue插值操作 1.Mustach语法 Mustach语法就是双大括号，所以也有人直接叫双括号语法,我们可以利用其进行基本的拼接和运算 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>Vue之初体验</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C-vue%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/</guid>
      <description>Vue初体验 前言：什么是Vue.js 摘自维基百科： Vue.js是一款流行的JavaScript前端框架，旨在更好地组织与简化Web开发。Vu</description>
    </item>
    
    <item>
      <title>Vue之动态绑定属性</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E5%B1%9E%E6%80%A7/</guid>
      <description>Vue之动态绑定 一、v-bind基础使用 v-bind能给元素动态绑定属性 img中的src在大多数情况下都是动态传递过来的数据，并非是写死的，</description>
    </item>
    
    <item>
      <title>Vue之计算属性</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vue%E4%B9%8B%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</guid>
      <description>&amp;ndash;&amp;rsquo;, newValue); const names = newValue.split(&amp;rsquo; &amp;lsquo;); this.firstName = names[0]; this.lastName = names[1]; }, get: function () { return this.firstName + &amp;rsquo; &amp;rsquo; + this.lastName } }, // fullName: function () { // return this.firstName + &#39; &#39; + this.lastName // } } }) ``` 三、计算属性和methods对比 1 2 3 4 5 6 7 8 9</description>
    </item>
    
    <item>
      <title>Vue之块级作用域let和var</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar-vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar-vue%E4%B9%8B%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9Flet%E5%92%8Cvar/</guid>
      <description>1.背景 js的作者Brendan Eich公开说明过var其实是js语言设计上的错误，但是这种错误多半不能修复和移除，所以大概在十几年前，Br</description>
    </item>
    
    <item>
      <title>Vue之事件监听</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC-vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC-vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</guid>
      <description>&amp;mdash;&amp;ndash;&amp;rsquo;, event); }, btn3Click(abc, event) { console.log(&amp;rsquo;++++++++&amp;rsquo;, abc, event); } } }) // 如果函数需要参数,但是没有传入, 那么函数的形参为undefined // function abc(name) { // console.log(name); // } // // abc() ``` 三、v-on修饰符 3.1</description>
    </item>
    
    <item>
      <title>Vue之书籍购物车案例</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B-vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B-vue%E4%B9%8B%E4%B9%A6%E7%B1%8D%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B/</guid>
      <description>index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;books.length&amp;#34;&amp;gt; &amp;lt;table&amp;gt; &amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之条件判断</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD-vue%E4%B9%8B%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid>
      <description>Vue条件判断 一、v-if的使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 v-if=&amp;#34;isShow&amp;#34;&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;abc&amp;lt;/div&amp;gt; {{message}} &amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之循环遍历</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86-vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86-vue%E4%B9%8B%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</guid>
      <description>Vue循环遍历 一、v-for遍历数组和对象 1.1.遍历数组不显示index（下标） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;item in colors&amp;#34;&amp;gt;{{item}}&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;js/vue.js&amp;#34; type=&amp;#34;text/javascript&amp;#34; charset=&amp;#34;utf-8&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue之组件化（二）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%BA%8C/</guid>
      <description>一、父组件和子组件的区分 1.1.在Vue实例app中注册组件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; /*创建组件构造</description>
    </item>
    
    <item>
      <title>Vue之组件化（三）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%89/</guid>
      <description>一、父子组件的通信&amp;ndash;父传子 一.回顾父子组件 子组件在父组件中注册并使用，在html中使用的是父组件的标签，子组件也会被展示。 1.不</description>
    </item>
    
    <item>
      <title>Vue之组件化（一）</title>
      <link>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>yuanshuai1122.github.io/post/vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80-vue%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%E4%B8%80/</guid>
      <description>一、组件化思想 1.1、组件化思想 遇到一大堆复杂的问题时，直接上手解决的话是非常困难的。面对这种情况，我们可以将这个大问题细分成许多小问题，逐</description>
    </item>
    
  </channel>
</rss>
